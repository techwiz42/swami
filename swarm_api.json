{
  "name": "swarm",
  "doc": null,
  "file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/__init__.py",
  "classes": {
    "Agent": {
      "name": "Agent",
      "qualname": "Agent",
      "module": "swarm.types",
      "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
      "bases": [
        "BaseModel"
      ],
      "methods": {
        "construct": {
          "name": "construct",
          "qualname": "BaseModel.construct",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "_fields_set": "set[str] | None",
            "values": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "_fields_set",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "None",
              "annotation": "set[str] | None"
            },
            {
              "name": "values",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "copy": {
          "name": "copy",
          "qualname": "BaseModel.copy",
          "module": "pydantic.main",
          "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
          "annotations": {
            "include": "AbstractSetIntStr | MappingIntStrAny | None",
            "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
            "update": "Dict[str, Any] | None",
            "deep": "bool",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
            },
            {
              "name": "update",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Dict[str, Any] | None"
            },
            {
              "name": "deep",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "dict": {
          "name": "dict",
          "qualname": "BaseModel.dict",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "include": "IncEx | None",
            "exclude": "IncEx | None",
            "by_alias": "bool",
            "exclude_unset": "bool",
            "exclude_defaults": "bool",
            "exclude_none": "bool",
            "return": "Dict[str, Any]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_unset",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_defaults",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_none",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Dict[str, Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "from_orm": {
          "name": "from_orm",
          "qualname": "BaseModel.from_orm",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "obj": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "json": {
          "name": "json",
          "qualname": "BaseModel.json",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "include": "IncEx | None",
            "exclude": "IncEx | None",
            "by_alias": "bool",
            "exclude_unset": "bool",
            "exclude_defaults": "bool",
            "exclude_none": "bool",
            "encoder": "Callable[[Any], Any] | None",
            "models_as_dict": "bool",
            "dumps_kwargs": "Any",
            "return": "str"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_unset",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_defaults",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_none",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "encoder",
              "kind": "KEYWORD_ONLY",
              "default": "PydanticUndefined",
              "annotation": "Callable[[Any], Any] | None"
            },
            {
              "name": "models_as_dict",
              "kind": "KEYWORD_ONLY",
              "default": "PydanticUndefined",
              "annotation": "bool"
            },
            {
              "name": "dumps_kwargs",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "str",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_construct": {
          "name": "model_construct",
          "qualname": "BaseModel.model_construct",
          "module": "pydantic.main",
          "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
          "annotations": {
            "_fields_set": "set[str] | None",
            "values": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "_fields_set",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "None",
              "annotation": "set[str] | None"
            },
            {
              "name": "values",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_copy": {
          "name": "model_copy",
          "qualname": "BaseModel.model_copy",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
          "annotations": {
            "update": "Mapping[str, Any] | None",
            "deep": "bool",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "update",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Mapping[str, Any] | None"
            },
            {
              "name": "deep",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_dump": {
          "name": "model_dump",
          "qualname": "BaseModel.model_dump",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
          "annotations": {
            "mode": "Literal['json', 'python'] | str",
            "include": "IncEx | None",
            "exclude": "IncEx | None",
            "context": "Any | None",
            "by_alias": "bool",
            "exclude_unset": "bool",
            "exclude_defaults": "bool",
            "exclude_none": "bool",
            "round_trip": "bool",
            "warnings": "bool | Literal['none', 'warn', 'error']",
            "serialize_as_any": "bool",
            "return": "dict[str, Any]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "mode",
              "kind": "KEYWORD_ONLY",
              "default": "python",
              "annotation": "Literal['json', 'python'] | str"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            },
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_unset",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_defaults",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_none",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "round_trip",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "warnings",
              "kind": "KEYWORD_ONLY",
              "default": "True",
              "annotation": "bool | Literal['none', 'warn', 'error']"
            },
            {
              "name": "serialize_as_any",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "dict[str, Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_dump_json": {
          "name": "model_dump_json",
          "qualname": "BaseModel.model_dump_json",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
          "annotations": {
            "indent": "int | None",
            "include": "IncEx | None",
            "exclude": "IncEx | None",
            "context": "Any | None",
            "by_alias": "bool",
            "exclude_unset": "bool",
            "exclude_defaults": "bool",
            "exclude_none": "bool",
            "round_trip": "bool",
            "warnings": "bool | Literal['none', 'warn', 'error']",
            "serialize_as_any": "bool",
            "return": "str"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "indent",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "int | None"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            },
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_unset",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_defaults",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_none",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "round_trip",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "warnings",
              "kind": "KEYWORD_ONLY",
              "default": "True",
              "annotation": "bool | Literal['none', 'warn', 'error']"
            },
            {
              "name": "serialize_as_any",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "str",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_json_schema": {
          "name": "model_json_schema",
          "qualname": "BaseModel.model_json_schema",
          "module": "pydantic.main",
          "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
          "annotations": {
            "by_alias": "bool",
            "ref_template": "str",
            "schema_generator": "type[GenerateJsonSchema]",
            "mode": "JsonSchemaMode",
            "return": "dict[str, Any]"
          },
          "parameters": [
            {
              "name": "by_alias",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "True",
              "annotation": "bool"
            },
            {
              "name": "ref_template",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "#/$defs/{model}",
              "annotation": "str"
            },
            {
              "name": "schema_generator",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
              "annotation": "type[GenerateJsonSchema]"
            },
            {
              "name": "mode",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "validation",
              "annotation": "JsonSchemaMode"
            }
          ],
          "return_annotation": "dict[str, Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_parametrized_name": {
          "name": "model_parametrized_name",
          "qualname": "BaseModel.model_parametrized_name",
          "module": "pydantic.main",
          "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
          "annotations": {
            "params": "tuple[type[Any], ...]",
            "return": "str"
          },
          "parameters": [
            {
              "name": "params",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "tuple[type[Any], ...]"
            }
          ],
          "return_annotation": "str",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_post_init": {
          "name": "model_post_init",
          "qualname": "BaseModel.model_post_init",
          "module": "pydantic.main",
          "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
          "annotations": {
            "_BaseModel__context": "Any",
            "return": "None"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "_BaseModel__context",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_rebuild": {
          "name": "model_rebuild",
          "qualname": "BaseModel.model_rebuild",
          "module": "pydantic.main",
          "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
          "annotations": {
            "force": "bool",
            "raise_errors": "bool",
            "_parent_namespace_depth": "int",
            "_types_namespace": "MappingNamespace | None",
            "return": "bool | None"
          },
          "parameters": [
            {
              "name": "force",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "raise_errors",
              "kind": "KEYWORD_ONLY",
              "default": "True",
              "annotation": "bool"
            },
            {
              "name": "_parent_namespace_depth",
              "kind": "KEYWORD_ONLY",
              "default": "2",
              "annotation": "int"
            },
            {
              "name": "_types_namespace",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "MappingNamespace | None"
            }
          ],
          "return_annotation": "bool | None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_validate": {
          "name": "model_validate",
          "qualname": "BaseModel.model_validate",
          "module": "pydantic.main",
          "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
          "annotations": {
            "obj": "Any",
            "strict": "bool | None",
            "from_attributes": "bool | None",
            "context": "Any | None",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "strict",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "bool | None"
            },
            {
              "name": "from_attributes",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "bool | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_validate_json": {
          "name": "model_validate_json",
          "qualname": "BaseModel.model_validate_json",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
          "annotations": {
            "json_data": "str | bytes | bytearray",
            "strict": "bool | None",
            "context": "Any | None",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "json_data",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "str | bytes | bytearray"
            },
            {
              "name": "strict",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "bool | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_validate_strings": {
          "name": "model_validate_strings",
          "qualname": "BaseModel.model_validate_strings",
          "module": "pydantic.main",
          "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
          "annotations": {
            "obj": "Any",
            "strict": "bool | None",
            "context": "Any | None",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "strict",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "bool | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "parse_file": {
          "name": "parse_file",
          "qualname": "BaseModel.parse_file",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "path": "str | Path",
            "content_type": "str | None",
            "encoding": "str",
            "proto": "DeprecatedParseProtocol | None",
            "allow_pickle": "bool",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "path",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "str | Path"
            },
            {
              "name": "content_type",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "str | None"
            },
            {
              "name": "encoding",
              "kind": "KEYWORD_ONLY",
              "default": "utf8",
              "annotation": "str"
            },
            {
              "name": "proto",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "DeprecatedParseProtocol | None"
            },
            {
              "name": "allow_pickle",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "parse_obj": {
          "name": "parse_obj",
          "qualname": "BaseModel.parse_obj",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "obj": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "parse_raw": {
          "name": "parse_raw",
          "qualname": "BaseModel.parse_raw",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "b": "str | bytes",
            "content_type": "str | None",
            "encoding": "str",
            "proto": "DeprecatedParseProtocol | None",
            "allow_pickle": "bool",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "b",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "str | bytes"
            },
            {
              "name": "content_type",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "str | None"
            },
            {
              "name": "encoding",
              "kind": "KEYWORD_ONLY",
              "default": "utf8",
              "annotation": "str"
            },
            {
              "name": "proto",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "DeprecatedParseProtocol | None"
            },
            {
              "name": "allow_pickle",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "schema": {
          "name": "schema",
          "qualname": "BaseModel.schema",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "by_alias": "bool",
            "ref_template": "str",
            "return": "Dict[str, Any]"
          },
          "parameters": [
            {
              "name": "by_alias",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "True",
              "annotation": "bool"
            },
            {
              "name": "ref_template",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "#/$defs/{model}",
              "annotation": "str"
            }
          ],
          "return_annotation": "Dict[str, Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "schema_json": {
          "name": "schema_json",
          "qualname": "BaseModel.schema_json",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "by_alias": "bool",
            "ref_template": "str",
            "dumps_kwargs": "Any",
            "return": "str"
          },
          "parameters": [
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "True",
              "annotation": "bool"
            },
            {
              "name": "ref_template",
              "kind": "KEYWORD_ONLY",
              "default": "#/$defs/{model}",
              "annotation": "str"
            },
            {
              "name": "dumps_kwargs",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "str",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "update_forward_refs": {
          "name": "update_forward_refs",
          "qualname": "BaseModel.update_forward_refs",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "localns": "Any",
            "return": "None"
          },
          "parameters": [
            {
              "name": "localns",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "validate": {
          "name": "validate",
          "qualname": "BaseModel.validate",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "value": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "value",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        }
      },
      "attributes": {
        "model_config": "dict"
      },
      "annotations": {
        "name": "<class 'str'>",
        "model": "<class 'str'>",
        "instructions": "typing.Union[str, typing.Callable[[], str]]",
        "functions": "typing.List[typing.Callable[[], typing.Union[str, ForwardRef('Agent'), dict]]]",
        "tool_choice": "<class 'str'>",
        "parallel_tool_calls": "<class 'bool'>"
      },
      "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py"
    },
    "Response": {
      "name": "Response",
      "qualname": "Response",
      "module": "swarm.types",
      "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
      "bases": [
        "BaseModel"
      ],
      "methods": {
        "construct": {
          "name": "construct",
          "qualname": "BaseModel.construct",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "_fields_set": "set[str] | None",
            "values": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "_fields_set",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "None",
              "annotation": "set[str] | None"
            },
            {
              "name": "values",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "copy": {
          "name": "copy",
          "qualname": "BaseModel.copy",
          "module": "pydantic.main",
          "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
          "annotations": {
            "include": "AbstractSetIntStr | MappingIntStrAny | None",
            "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
            "update": "Dict[str, Any] | None",
            "deep": "bool",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
            },
            {
              "name": "update",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Dict[str, Any] | None"
            },
            {
              "name": "deep",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "dict": {
          "name": "dict",
          "qualname": "BaseModel.dict",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "include": "IncEx | None",
            "exclude": "IncEx | None",
            "by_alias": "bool",
            "exclude_unset": "bool",
            "exclude_defaults": "bool",
            "exclude_none": "bool",
            "return": "Dict[str, Any]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_unset",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_defaults",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_none",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Dict[str, Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "from_orm": {
          "name": "from_orm",
          "qualname": "BaseModel.from_orm",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "obj": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "json": {
          "name": "json",
          "qualname": "BaseModel.json",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "include": "IncEx | None",
            "exclude": "IncEx | None",
            "by_alias": "bool",
            "exclude_unset": "bool",
            "exclude_defaults": "bool",
            "exclude_none": "bool",
            "encoder": "Callable[[Any], Any] | None",
            "models_as_dict": "bool",
            "dumps_kwargs": "Any",
            "return": "str"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_unset",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_defaults",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_none",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "encoder",
              "kind": "KEYWORD_ONLY",
              "default": "PydanticUndefined",
              "annotation": "Callable[[Any], Any] | None"
            },
            {
              "name": "models_as_dict",
              "kind": "KEYWORD_ONLY",
              "default": "PydanticUndefined",
              "annotation": "bool"
            },
            {
              "name": "dumps_kwargs",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "str",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_construct": {
          "name": "model_construct",
          "qualname": "BaseModel.model_construct",
          "module": "pydantic.main",
          "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
          "annotations": {
            "_fields_set": "set[str] | None",
            "values": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "_fields_set",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "None",
              "annotation": "set[str] | None"
            },
            {
              "name": "values",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_copy": {
          "name": "model_copy",
          "qualname": "BaseModel.model_copy",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
          "annotations": {
            "update": "Mapping[str, Any] | None",
            "deep": "bool",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "update",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Mapping[str, Any] | None"
            },
            {
              "name": "deep",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_dump": {
          "name": "model_dump",
          "qualname": "BaseModel.model_dump",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
          "annotations": {
            "mode": "Literal['json', 'python'] | str",
            "include": "IncEx | None",
            "exclude": "IncEx | None",
            "context": "Any | None",
            "by_alias": "bool",
            "exclude_unset": "bool",
            "exclude_defaults": "bool",
            "exclude_none": "bool",
            "round_trip": "bool",
            "warnings": "bool | Literal['none', 'warn', 'error']",
            "serialize_as_any": "bool",
            "return": "dict[str, Any]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "mode",
              "kind": "KEYWORD_ONLY",
              "default": "python",
              "annotation": "Literal['json', 'python'] | str"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            },
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_unset",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_defaults",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_none",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "round_trip",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "warnings",
              "kind": "KEYWORD_ONLY",
              "default": "True",
              "annotation": "bool | Literal['none', 'warn', 'error']"
            },
            {
              "name": "serialize_as_any",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "dict[str, Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_dump_json": {
          "name": "model_dump_json",
          "qualname": "BaseModel.model_dump_json",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
          "annotations": {
            "indent": "int | None",
            "include": "IncEx | None",
            "exclude": "IncEx | None",
            "context": "Any | None",
            "by_alias": "bool",
            "exclude_unset": "bool",
            "exclude_defaults": "bool",
            "exclude_none": "bool",
            "round_trip": "bool",
            "warnings": "bool | Literal['none', 'warn', 'error']",
            "serialize_as_any": "bool",
            "return": "str"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "indent",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "int | None"
            },
            {
              "name": "include",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "exclude",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "IncEx | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            },
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_unset",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_defaults",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "exclude_none",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "round_trip",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "warnings",
              "kind": "KEYWORD_ONLY",
              "default": "True",
              "annotation": "bool | Literal['none', 'warn', 'error']"
            },
            {
              "name": "serialize_as_any",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "str",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_json_schema": {
          "name": "model_json_schema",
          "qualname": "BaseModel.model_json_schema",
          "module": "pydantic.main",
          "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
          "annotations": {
            "by_alias": "bool",
            "ref_template": "str",
            "schema_generator": "type[GenerateJsonSchema]",
            "mode": "JsonSchemaMode",
            "return": "dict[str, Any]"
          },
          "parameters": [
            {
              "name": "by_alias",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "True",
              "annotation": "bool"
            },
            {
              "name": "ref_template",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "#/$defs/{model}",
              "annotation": "str"
            },
            {
              "name": "schema_generator",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
              "annotation": "type[GenerateJsonSchema]"
            },
            {
              "name": "mode",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "validation",
              "annotation": "JsonSchemaMode"
            }
          ],
          "return_annotation": "dict[str, Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_parametrized_name": {
          "name": "model_parametrized_name",
          "qualname": "BaseModel.model_parametrized_name",
          "module": "pydantic.main",
          "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
          "annotations": {
            "params": "tuple[type[Any], ...]",
            "return": "str"
          },
          "parameters": [
            {
              "name": "params",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "tuple[type[Any], ...]"
            }
          ],
          "return_annotation": "str",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_post_init": {
          "name": "model_post_init",
          "qualname": "BaseModel.model_post_init",
          "module": "pydantic.main",
          "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
          "annotations": {
            "_BaseModel__context": "Any",
            "return": "None"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "_BaseModel__context",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_rebuild": {
          "name": "model_rebuild",
          "qualname": "BaseModel.model_rebuild",
          "module": "pydantic.main",
          "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
          "annotations": {
            "force": "bool",
            "raise_errors": "bool",
            "_parent_namespace_depth": "int",
            "_types_namespace": "MappingNamespace | None",
            "return": "bool | None"
          },
          "parameters": [
            {
              "name": "force",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            },
            {
              "name": "raise_errors",
              "kind": "KEYWORD_ONLY",
              "default": "True",
              "annotation": "bool"
            },
            {
              "name": "_parent_namespace_depth",
              "kind": "KEYWORD_ONLY",
              "default": "2",
              "annotation": "int"
            },
            {
              "name": "_types_namespace",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "MappingNamespace | None"
            }
          ],
          "return_annotation": "bool | None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_validate": {
          "name": "model_validate",
          "qualname": "BaseModel.model_validate",
          "module": "pydantic.main",
          "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
          "annotations": {
            "obj": "Any",
            "strict": "bool | None",
            "from_attributes": "bool | None",
            "context": "Any | None",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "strict",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "bool | None"
            },
            {
              "name": "from_attributes",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "bool | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_validate_json": {
          "name": "model_validate_json",
          "qualname": "BaseModel.model_validate_json",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
          "annotations": {
            "json_data": "str | bytes | bytearray",
            "strict": "bool | None",
            "context": "Any | None",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "json_data",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "str | bytes | bytearray"
            },
            {
              "name": "strict",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "bool | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "model_validate_strings": {
          "name": "model_validate_strings",
          "qualname": "BaseModel.model_validate_strings",
          "module": "pydantic.main",
          "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
          "annotations": {
            "obj": "Any",
            "strict": "bool | None",
            "context": "Any | None",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "strict",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "bool | None"
            },
            {
              "name": "context",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "Any | None"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "parse_file": {
          "name": "parse_file",
          "qualname": "BaseModel.parse_file",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "path": "str | Path",
            "content_type": "str | None",
            "encoding": "str",
            "proto": "DeprecatedParseProtocol | None",
            "allow_pickle": "bool",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "path",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "str | Path"
            },
            {
              "name": "content_type",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "str | None"
            },
            {
              "name": "encoding",
              "kind": "KEYWORD_ONLY",
              "default": "utf8",
              "annotation": "str"
            },
            {
              "name": "proto",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "DeprecatedParseProtocol | None"
            },
            {
              "name": "allow_pickle",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "parse_obj": {
          "name": "parse_obj",
          "qualname": "BaseModel.parse_obj",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "obj": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "parse_raw": {
          "name": "parse_raw",
          "qualname": "BaseModel.parse_raw",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "b": "str | bytes",
            "content_type": "str | None",
            "encoding": "str",
            "proto": "DeprecatedParseProtocol | None",
            "allow_pickle": "bool",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "b",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "str | bytes"
            },
            {
              "name": "content_type",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "str | None"
            },
            {
              "name": "encoding",
              "kind": "KEYWORD_ONLY",
              "default": "utf8",
              "annotation": "str"
            },
            {
              "name": "proto",
              "kind": "KEYWORD_ONLY",
              "default": "None",
              "annotation": "DeprecatedParseProtocol | None"
            },
            {
              "name": "allow_pickle",
              "kind": "KEYWORD_ONLY",
              "default": "False",
              "annotation": "bool"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "schema": {
          "name": "schema",
          "qualname": "BaseModel.schema",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "by_alias": "bool",
            "ref_template": "str",
            "return": "Dict[str, Any]"
          },
          "parameters": [
            {
              "name": "by_alias",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "True",
              "annotation": "bool"
            },
            {
              "name": "ref_template",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "#/$defs/{model}",
              "annotation": "str"
            }
          ],
          "return_annotation": "Dict[str, Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "schema_json": {
          "name": "schema_json",
          "qualname": "BaseModel.schema_json",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "by_alias": "bool",
            "ref_template": "str",
            "dumps_kwargs": "Any",
            "return": "str"
          },
          "parameters": [
            {
              "name": "by_alias",
              "kind": "KEYWORD_ONLY",
              "default": "True",
              "annotation": "bool"
            },
            {
              "name": "ref_template",
              "kind": "KEYWORD_ONLY",
              "default": "#/$defs/{model}",
              "annotation": "str"
            },
            {
              "name": "dumps_kwargs",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "str",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "update_forward_refs": {
          "name": "update_forward_refs",
          "qualname": "BaseModel.update_forward_refs",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "localns": "Any",
            "return": "None"
          },
          "parameters": [
            {
              "name": "localns",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "validate": {
          "name": "validate",
          "qualname": "BaseModel.validate",
          "module": "pydantic.main",
          "doc": null,
          "annotations": {
            "value": "Any",
            "return": "Self"
          },
          "parameters": [
            {
              "name": "value",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Self",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        }
      },
      "attributes": {
        "model_config": "dict"
      },
      "annotations": {
        "messages": "typing.List",
        "agent": "typing.Optional[swarm.types.Agent]",
        "context_variables": "<class 'dict'>"
      },
      "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py"
    },
    "Swarm": {
      "name": "Swarm",
      "qualname": "Swarm",
      "module": "swarm.core",
      "doc": null,
      "bases": [],
      "methods": {
        "get_chat_completion": {
          "name": "get_chat_completion",
          "qualname": "Swarm.get_chat_completion",
          "module": "swarm.core",
          "doc": null,
          "annotations": {
            "agent": "<class 'swarm.types.Agent'>",
            "history": "typing.List",
            "context_variables": "<class 'dict'>",
            "model_override": "<class 'str'>",
            "stream": "<class 'bool'>",
            "debug": "<class 'bool'>",
            "return": "<class 'openai.types.chat.chat_completion_message.ChatCompletionMessage'>"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "agent",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'swarm.types.Agent'>"
            },
            {
              "name": "history",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "typing.List"
            },
            {
              "name": "context_variables",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'dict'>"
            },
            {
              "name": "model_override",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'str'>"
            },
            {
              "name": "stream",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'bool'>"
            },
            {
              "name": "debug",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'bool'>"
            }
          ],
          "return_annotation": "<class 'openai.types.chat.chat_completion_message.ChatCompletionMessage'>",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
        },
        "handle_function_result": {
          "name": "handle_function_result",
          "qualname": "Swarm.handle_function_result",
          "module": "swarm.core",
          "doc": null,
          "annotations": {
            "return": "<class 'swarm.types.Result'>"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "result",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "debug",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "<class 'swarm.types.Result'>",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
        },
        "handle_tool_calls": {
          "name": "handle_tool_calls",
          "qualname": "Swarm.handle_tool_calls",
          "module": "swarm.core",
          "doc": null,
          "annotations": {
            "tool_calls": "typing.List[openai.types.chat.chat_completion_message_tool_call.ChatCompletionMessageToolCall]",
            "functions": "typing.List[typing.Callable[[], typing.Union[str, ForwardRef('Agent'), dict]]]",
            "context_variables": "<class 'dict'>",
            "debug": "<class 'bool'>",
            "return": "<class 'swarm.types.Response'>"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "tool_calls",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "typing.List[openai.types.chat.chat_completion_message_tool_call.ChatCompletionMessageToolCall]"
            },
            {
              "name": "functions",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "typing.List[typing.Callable[[], typing.Union[str, ForwardRef('Agent'), dict]]]"
            },
            {
              "name": "context_variables",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'dict'>"
            },
            {
              "name": "debug",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'bool'>"
            }
          ],
          "return_annotation": "<class 'swarm.types.Response'>",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
        },
        "run": {
          "name": "run",
          "qualname": "Swarm.run",
          "module": "swarm.core",
          "doc": null,
          "annotations": {
            "agent": "<class 'swarm.types.Agent'>",
            "messages": "typing.List",
            "context_variables": "<class 'dict'>",
            "model_override": "<class 'str'>",
            "stream": "<class 'bool'>",
            "debug": "<class 'bool'>",
            "max_turns": "<class 'int'>",
            "execute_tools": "<class 'bool'>",
            "return": "<class 'swarm.types.Response'>"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "agent",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'swarm.types.Agent'>"
            },
            {
              "name": "messages",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "typing.List"
            },
            {
              "name": "context_variables",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "{}",
              "annotation": "<class 'dict'>"
            },
            {
              "name": "model_override",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "None",
              "annotation": "<class 'str'>"
            },
            {
              "name": "stream",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "False",
              "annotation": "<class 'bool'>"
            },
            {
              "name": "debug",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "False",
              "annotation": "<class 'bool'>"
            },
            {
              "name": "max_turns",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "inf",
              "annotation": "<class 'int'>"
            },
            {
              "name": "execute_tools",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "True",
              "annotation": "<class 'bool'>"
            }
          ],
          "return_annotation": "<class 'swarm.types.Response'>",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
        },
        "run_and_stream": {
          "name": "run_and_stream",
          "qualname": "Swarm.run_and_stream",
          "module": "swarm.core",
          "doc": null,
          "annotations": {
            "agent": "<class 'swarm.types.Agent'>",
            "messages": "typing.List",
            "context_variables": "<class 'dict'>",
            "model_override": "<class 'str'>",
            "debug": "<class 'bool'>",
            "max_turns": "<class 'int'>",
            "execute_tools": "<class 'bool'>"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "agent",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'swarm.types.Agent'>"
            },
            {
              "name": "messages",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "typing.List"
            },
            {
              "name": "context_variables",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "{}",
              "annotation": "<class 'dict'>"
            },
            {
              "name": "model_override",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "None",
              "annotation": "<class 'str'>"
            },
            {
              "name": "debug",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "False",
              "annotation": "<class 'bool'>"
            },
            {
              "name": "max_turns",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "inf",
              "annotation": "<class 'int'>"
            },
            {
              "name": "execute_tools",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "True",
              "annotation": "<class 'bool'>"
            }
          ],
          "return_annotation": "Any",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
        }
      },
      "attributes": {},
      "annotations": {},
      "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
    }
  },
  "functions": {},
  "submodules": {
    "core": {
      "name": "swarm.core",
      "doc": null,
      "file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py",
      "classes": {
        "Agent": {
          "name": "Agent",
          "qualname": "Agent",
          "module": "swarm.types",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "model_construct",
              "qualname": "BaseModel.model_construct",
              "module": "pydantic.main",
              "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "name": "<class 'str'>",
            "model": "<class 'str'>",
            "instructions": "typing.Union[str, typing.Callable[[], str]]",
            "functions": "typing.List[typing.Callable[[], typing.Union[str, ForwardRef('Agent'), dict]]]",
            "tool_choice": "<class 'str'>",
            "parallel_tool_calls": "<class 'bool'>"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py"
        },
        "ChatCompletionMessage": {
          "name": "ChatCompletionMessage",
          "qualname": "ChatCompletionMessage",
          "module": "openai.types.chat.chat_completion_message",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "to_dict": {
              "name": "to_dict",
              "qualname": "BaseModel.to_dict",
              "module": "openai._models",
              "doc": "Recursively generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    mode:\n        If mode is 'json', the dictionary will only contain JSON serializable types. e.g. `datetime` will be turned into a string, `\"2024-3-22T18:11:19.117000Z\"`.\n        If mode is 'python', the dictionary may contain any Python objects. e.g. `datetime(2024, 3, 22)`\n\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value from the output.\n    exclude_none: Whether to exclude fields that have a value of `None` from the output.\n    warnings: Whether to log warnings when invalid fields are encountered. This is only supported in Pydantic v2.",
              "annotations": {
                "mode": "Literal['json', 'python']",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "dict[str, object]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python']"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, object]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "to_json": {
              "name": "to_json",
              "qualname": "BaseModel.to_json",
              "module": "openai._models",
              "doc": "Generates a JSON string representing this model as it would be received from or sent to the API (but with indentation).\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    indent: Indentation to use in the JSON output. If `None` is passed, the output will be compact. Defaults to `2`\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that have the default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    warnings: Whether to show any warnings that occurred during serialization. This is only supported in Pydantic v2.",
              "annotations": {
                "indent": "int | None",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int | None"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "content": "typing.Optional[str]",
            "refusal": "typing.Optional[str]",
            "role": "typing.Literal['assistant']",
            "audio": "typing.Optional[openai.types.chat.chat_completion_audio.ChatCompletionAudio]",
            "function_call": "typing.Optional[openai.types.chat.chat_completion_message.FunctionCall]",
            "tool_calls": "typing.Optional[typing.List[openai.types.chat.chat_completion_message_tool_call.ChatCompletionMessageToolCall]]"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/types/chat/chat_completion_message.py"
        },
        "ChatCompletionMessageToolCall": {
          "name": "ChatCompletionMessageToolCall",
          "qualname": "ChatCompletionMessageToolCall",
          "module": "openai.types.chat.chat_completion_message_tool_call",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "to_dict": {
              "name": "to_dict",
              "qualname": "BaseModel.to_dict",
              "module": "openai._models",
              "doc": "Recursively generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    mode:\n        If mode is 'json', the dictionary will only contain JSON serializable types. e.g. `datetime` will be turned into a string, `\"2024-3-22T18:11:19.117000Z\"`.\n        If mode is 'python', the dictionary may contain any Python objects. e.g. `datetime(2024, 3, 22)`\n\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value from the output.\n    exclude_none: Whether to exclude fields that have a value of `None` from the output.\n    warnings: Whether to log warnings when invalid fields are encountered. This is only supported in Pydantic v2.",
              "annotations": {
                "mode": "Literal['json', 'python']",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "dict[str, object]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python']"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, object]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "to_json": {
              "name": "to_json",
              "qualname": "BaseModel.to_json",
              "module": "openai._models",
              "doc": "Generates a JSON string representing this model as it would be received from or sent to the API (but with indentation).\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    indent: Indentation to use in the JSON output. If `None` is passed, the output will be compact. Defaults to `2`\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that have the default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    warnings: Whether to show any warnings that occurred during serialization. This is only supported in Pydantic v2.",
              "annotations": {
                "indent": "int | None",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int | None"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "id": "<class 'str'>",
            "function": "<class 'openai.types.chat.chat_completion_message_tool_call.Function'>",
            "type": "typing.Literal['function']"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/types/chat/chat_completion_message_tool_call.py"
        },
        "Function": {
          "name": "Function",
          "qualname": "Function",
          "module": "openai.types.chat.chat_completion_message_tool_call",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "to_dict": {
              "name": "to_dict",
              "qualname": "BaseModel.to_dict",
              "module": "openai._models",
              "doc": "Recursively generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    mode:\n        If mode is 'json', the dictionary will only contain JSON serializable types. e.g. `datetime` will be turned into a string, `\"2024-3-22T18:11:19.117000Z\"`.\n        If mode is 'python', the dictionary may contain any Python objects. e.g. `datetime(2024, 3, 22)`\n\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value from the output.\n    exclude_none: Whether to exclude fields that have a value of `None` from the output.\n    warnings: Whether to log warnings when invalid fields are encountered. This is only supported in Pydantic v2.",
              "annotations": {
                "mode": "Literal['json', 'python']",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "dict[str, object]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python']"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, object]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "to_json": {
              "name": "to_json",
              "qualname": "BaseModel.to_json",
              "module": "openai._models",
              "doc": "Generates a JSON string representing this model as it would be received from or sent to the API (but with indentation).\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    indent: Indentation to use in the JSON output. If `None` is passed, the output will be compact. Defaults to `2`\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that have the default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    warnings: Whether to show any warnings that occurred during serialization. This is only supported in Pydantic v2.",
              "annotations": {
                "indent": "int | None",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int | None"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "arguments": "<class 'str'>",
            "name": "<class 'str'>"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/types/chat/chat_completion_message_tool_call.py"
        },
        "OpenAI": {
          "name": "OpenAI",
          "qualname": "OpenAI",
          "module": "openai",
          "doc": "Abstract base class for generic types.\n\nA generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::\n\n  class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.\n\nThis class can then be used as follows::\n\n  def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default",
          "bases": [
            "SyncAPIClient"
          ],
          "methods": {
            "close": {
              "name": "close",
              "qualname": "SyncAPIClient.close",
              "module": "openai._base_client",
              "doc": "Close the underlying HTTPX client.\n\nThe client will *not* be usable after this.",
              "annotations": {
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "OpenAI.copy",
              "module": "openai._client",
              "doc": "Create a new client instance re-using the same options given to the current client with optional overriding.",
              "annotations": {
                "api_key": "str | None",
                "organization": "str | None",
                "project": "str | None",
                "websocket_base_url": "str | httpx.URL | None",
                "base_url": "str | httpx.URL | None",
                "timeout": "float | Timeout | None | NotGiven",
                "http_client": "httpx.Client | None",
                "max_retries": "int | NotGiven",
                "default_headers": "Mapping[str, str] | None",
                "set_default_headers": "Mapping[str, str] | None",
                "default_query": "Mapping[str, object] | None",
                "set_default_query": "Mapping[str, object] | None",
                "_extra_kwargs": "Mapping[str, Any]",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "api_key",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "organization",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "project",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "websocket_base_url",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | httpx.URL | None"
                },
                {
                  "name": "base_url",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | httpx.URL | None"
                },
                {
                  "name": "timeout",
                  "kind": "KEYWORD_ONLY",
                  "default": "NOT_GIVEN",
                  "annotation": "float | Timeout | None | NotGiven"
                },
                {
                  "name": "http_client",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "httpx.Client | None"
                },
                {
                  "name": "max_retries",
                  "kind": "KEYWORD_ONLY",
                  "default": "NOT_GIVEN",
                  "annotation": "int | NotGiven"
                },
                {
                  "name": "default_headers",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, str] | None"
                },
                {
                  "name": "set_default_headers",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, str] | None"
                },
                {
                  "name": "default_query",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, object] | None"
                },
                {
                  "name": "set_default_query",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, object] | None"
                },
                {
                  "name": "_extra_kwargs",
                  "kind": "KEYWORD_ONLY",
                  "default": "{}",
                  "annotation": "Mapping[str, Any]"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_client.py"
            },
            "delete": {
              "name": "delete",
              "qualname": "SyncAPIClient.delete",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "path": "str",
                "cast_to": "Type[ResponseT]",
                "body": "Body | None",
                "options": "RequestOptions",
                "return": "ResponseT"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str"
                },
                {
                  "name": "cast_to",
                  "kind": "KEYWORD_ONLY",
                  "default": null,
                  "annotation": "Type[ResponseT]"
                },
                {
                  "name": "body",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Body | None"
                },
                {
                  "name": "options",
                  "kind": "KEYWORD_ONLY",
                  "default": "{}",
                  "annotation": "RequestOptions"
                }
              ],
              "return_annotation": "ResponseT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "get": {
              "name": "get",
              "qualname": "SyncAPIClient.get",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "path": "str",
                "cast_to": "Type[ResponseT]",
                "options": "RequestOptions",
                "stream": "bool",
                "stream_cls": "type[_StreamT] | None",
                "return": "ResponseT | _StreamT"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str"
                },
                {
                  "name": "cast_to",
                  "kind": "KEYWORD_ONLY",
                  "default": null,
                  "annotation": "Type[ResponseT]"
                },
                {
                  "name": "options",
                  "kind": "KEYWORD_ONLY",
                  "default": "{}",
                  "annotation": "RequestOptions"
                },
                {
                  "name": "stream",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "stream_cls",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "type[_StreamT] | None"
                }
              ],
              "return_annotation": "ResponseT | _StreamT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "get_api_list": {
              "name": "get_api_list",
              "qualname": "SyncAPIClient.get_api_list",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "path": "str",
                "model": "Type[object]",
                "page": "Type[SyncPageT]",
                "body": "Body | None",
                "options": "RequestOptions",
                "method": "str",
                "return": "SyncPageT"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str"
                },
                {
                  "name": "model",
                  "kind": "KEYWORD_ONLY",
                  "default": null,
                  "annotation": "Type[object]"
                },
                {
                  "name": "page",
                  "kind": "KEYWORD_ONLY",
                  "default": null,
                  "annotation": "Type[SyncPageT]"
                },
                {
                  "name": "body",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Body | None"
                },
                {
                  "name": "options",
                  "kind": "KEYWORD_ONLY",
                  "default": "{}",
                  "annotation": "RequestOptions"
                },
                {
                  "name": "method",
                  "kind": "KEYWORD_ONLY",
                  "default": "get",
                  "annotation": "str"
                }
              ],
              "return_annotation": "SyncPageT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "is_closed": {
              "name": "is_closed",
              "qualname": "SyncAPIClient.is_closed",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "return": "bool"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "bool",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "patch": {
              "name": "patch",
              "qualname": "SyncAPIClient.patch",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "path": "str",
                "cast_to": "Type[ResponseT]",
                "body": "Body | None",
                "options": "RequestOptions",
                "return": "ResponseT"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str"
                },
                {
                  "name": "cast_to",
                  "kind": "KEYWORD_ONLY",
                  "default": null,
                  "annotation": "Type[ResponseT]"
                },
                {
                  "name": "body",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Body | None"
                },
                {
                  "name": "options",
                  "kind": "KEYWORD_ONLY",
                  "default": "{}",
                  "annotation": "RequestOptions"
                }
              ],
              "return_annotation": "ResponseT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "platform_headers": {
              "name": "platform_headers",
              "qualname": "BaseClient.platform_headers",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "return": "Dict[str, str]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Dict[str, str]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "post": {
              "name": "post",
              "qualname": "SyncAPIClient.post",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "path": "str",
                "cast_to": "Type[ResponseT]",
                "body": "Body | None",
                "options": "RequestOptions",
                "files": "RequestFiles | None",
                "stream": "bool",
                "stream_cls": "type[_StreamT] | None",
                "return": "ResponseT | _StreamT"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str"
                },
                {
                  "name": "cast_to",
                  "kind": "KEYWORD_ONLY",
                  "default": null,
                  "annotation": "Type[ResponseT]"
                },
                {
                  "name": "body",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Body | None"
                },
                {
                  "name": "options",
                  "kind": "KEYWORD_ONLY",
                  "default": "{}",
                  "annotation": "RequestOptions"
                },
                {
                  "name": "files",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "RequestFiles | None"
                },
                {
                  "name": "stream",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "stream_cls",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "type[_StreamT] | None"
                }
              ],
              "return_annotation": "ResponseT | _StreamT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "put": {
              "name": "put",
              "qualname": "SyncAPIClient.put",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "path": "str",
                "cast_to": "Type[ResponseT]",
                "body": "Body | None",
                "files": "RequestFiles | None",
                "options": "RequestOptions",
                "return": "ResponseT"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str"
                },
                {
                  "name": "cast_to",
                  "kind": "KEYWORD_ONLY",
                  "default": null,
                  "annotation": "Type[ResponseT]"
                },
                {
                  "name": "body",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Body | None"
                },
                {
                  "name": "files",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "RequestFiles | None"
                },
                {
                  "name": "options",
                  "kind": "KEYWORD_ONLY",
                  "default": "{}",
                  "annotation": "RequestOptions"
                }
              ],
              "return_annotation": "ResponseT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "request": {
              "name": "request",
              "qualname": "SyncAPIClient.request",
              "module": "openai._base_client",
              "doc": null,
              "annotations": {
                "cast_to": "Type[ResponseT]",
                "options": "FinalRequestOptions",
                "remaining_retries": "Optional[int]",
                "stream": "bool",
                "stream_cls": "type[_StreamT] | None",
                "return": "ResponseT | _StreamT"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "cast_to",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Type[ResponseT]"
                },
                {
                  "name": "options",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "FinalRequestOptions"
                },
                {
                  "name": "remaining_retries",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "Optional[int]"
                },
                {
                  "name": "stream",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "stream_cls",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "type[_StreamT] | None"
                }
              ],
              "return_annotation": "ResponseT | _StreamT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_base_client.py"
            },
            "with_options": {
              "name": "copy",
              "qualname": "OpenAI.copy",
              "module": "openai._client",
              "doc": "Create a new client instance re-using the same options given to the current client with optional overriding.",
              "annotations": {
                "api_key": "str | None",
                "organization": "str | None",
                "project": "str | None",
                "websocket_base_url": "str | httpx.URL | None",
                "base_url": "str | httpx.URL | None",
                "timeout": "float | Timeout | None | NotGiven",
                "http_client": "httpx.Client | None",
                "max_retries": "int | NotGiven",
                "default_headers": "Mapping[str, str] | None",
                "set_default_headers": "Mapping[str, str] | None",
                "default_query": "Mapping[str, object] | None",
                "set_default_query": "Mapping[str, object] | None",
                "_extra_kwargs": "Mapping[str, Any]",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "api_key",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "organization",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "project",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "websocket_base_url",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | httpx.URL | None"
                },
                {
                  "name": "base_url",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | httpx.URL | None"
                },
                {
                  "name": "timeout",
                  "kind": "KEYWORD_ONLY",
                  "default": "NOT_GIVEN",
                  "annotation": "float | Timeout | None | NotGiven"
                },
                {
                  "name": "http_client",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "httpx.Client | None"
                },
                {
                  "name": "max_retries",
                  "kind": "KEYWORD_ONLY",
                  "default": "NOT_GIVEN",
                  "annotation": "int | NotGiven"
                },
                {
                  "name": "default_headers",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, str] | None"
                },
                {
                  "name": "set_default_headers",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, str] | None"
                },
                {
                  "name": "default_query",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, object] | None"
                },
                {
                  "name": "set_default_query",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, object] | None"
                },
                {
                  "name": "_extra_kwargs",
                  "kind": "KEYWORD_ONLY",
                  "default": "{}",
                  "annotation": "Mapping[str, Any]"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_client.py"
            }
          },
          "attributes": {
            "qs": "property",
            "auth_headers": "property",
            "default_headers": "property"
          },
          "annotations": {
            "completions": "completions.Completions",
            "chat": "chat.Chat",
            "embeddings": "embeddings.Embeddings",
            "files": "files.Files",
            "images": "images.Images",
            "audio": "audio.Audio",
            "moderations": "moderations.Moderations",
            "models": "models.Models",
            "fine_tuning": "fine_tuning.FineTuning",
            "beta": "beta.Beta",
            "batches": "batches.Batches",
            "uploads": "uploads.Uploads",
            "with_raw_response": "OpenAIWithRawResponse",
            "with_streaming_response": "OpenAIWithStreamedResponse",
            "api_key": "str",
            "organization": "str | None",
            "project": "str | None",
            "websocket_base_url": "str | httpx.URL | None"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/__init__.py"
        },
        "Response": {
          "name": "Response",
          "qualname": "Response",
          "module": "swarm.types",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "model_construct",
              "qualname": "BaseModel.model_construct",
              "module": "pydantic.main",
              "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "messages": "typing.List",
            "agent": "typing.Optional[swarm.types.Agent]",
            "context_variables": "<class 'dict'>"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py"
        },
        "Result": {
          "name": "Result",
          "qualname": "Result",
          "module": "swarm.types",
          "doc": "Encapsulates the possible return values for an agent function.\n\nAttributes:\n    value (str): The result value as a string.\n    agent (Agent): The agent instance, if applicable.\n    context_variables (dict): A dictionary of context variables.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "model_construct",
              "qualname": "BaseModel.model_construct",
              "module": "pydantic.main",
              "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "value": "<class 'str'>",
            "agent": "typing.Optional[swarm.types.Agent]",
            "context_variables": "<class 'dict'>"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py"
        },
        "Swarm": {
          "name": "Swarm",
          "qualname": "Swarm",
          "module": "swarm.core",
          "doc": null,
          "bases": [],
          "methods": {
            "get_chat_completion": {
              "name": "get_chat_completion",
              "qualname": "Swarm.get_chat_completion",
              "module": "swarm.core",
              "doc": null,
              "annotations": {
                "agent": "<class 'swarm.types.Agent'>",
                "history": "typing.List",
                "context_variables": "<class 'dict'>",
                "model_override": "<class 'str'>",
                "stream": "<class 'bool'>",
                "debug": "<class 'bool'>",
                "return": "<class 'openai.types.chat.chat_completion_message.ChatCompletionMessage'>"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "agent",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'swarm.types.Agent'>"
                },
                {
                  "name": "history",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "typing.List"
                },
                {
                  "name": "context_variables",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'dict'>"
                },
                {
                  "name": "model_override",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'str'>"
                },
                {
                  "name": "stream",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'bool'>"
                },
                {
                  "name": "debug",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'bool'>"
                }
              ],
              "return_annotation": "<class 'openai.types.chat.chat_completion_message.ChatCompletionMessage'>",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
            },
            "handle_function_result": {
              "name": "handle_function_result",
              "qualname": "Swarm.handle_function_result",
              "module": "swarm.core",
              "doc": null,
              "annotations": {
                "return": "<class 'swarm.types.Result'>"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "result",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "debug",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "<class 'swarm.types.Result'>",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
            },
            "handle_tool_calls": {
              "name": "handle_tool_calls",
              "qualname": "Swarm.handle_tool_calls",
              "module": "swarm.core",
              "doc": null,
              "annotations": {
                "tool_calls": "typing.List[openai.types.chat.chat_completion_message_tool_call.ChatCompletionMessageToolCall]",
                "functions": "typing.List[typing.Callable[[], typing.Union[str, ForwardRef('Agent'), dict]]]",
                "context_variables": "<class 'dict'>",
                "debug": "<class 'bool'>",
                "return": "<class 'swarm.types.Response'>"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "tool_calls",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "typing.List[openai.types.chat.chat_completion_message_tool_call.ChatCompletionMessageToolCall]"
                },
                {
                  "name": "functions",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "typing.List[typing.Callable[[], typing.Union[str, ForwardRef('Agent'), dict]]]"
                },
                {
                  "name": "context_variables",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'dict'>"
                },
                {
                  "name": "debug",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'bool'>"
                }
              ],
              "return_annotation": "<class 'swarm.types.Response'>",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
            },
            "run": {
              "name": "run",
              "qualname": "Swarm.run",
              "module": "swarm.core",
              "doc": null,
              "annotations": {
                "agent": "<class 'swarm.types.Agent'>",
                "messages": "typing.List",
                "context_variables": "<class 'dict'>",
                "model_override": "<class 'str'>",
                "stream": "<class 'bool'>",
                "debug": "<class 'bool'>",
                "max_turns": "<class 'int'>",
                "execute_tools": "<class 'bool'>",
                "return": "<class 'swarm.types.Response'>"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "agent",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'swarm.types.Agent'>"
                },
                {
                  "name": "messages",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "typing.List"
                },
                {
                  "name": "context_variables",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "{}",
                  "annotation": "<class 'dict'>"
                },
                {
                  "name": "model_override",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "<class 'str'>"
                },
                {
                  "name": "stream",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "False",
                  "annotation": "<class 'bool'>"
                },
                {
                  "name": "debug",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "False",
                  "annotation": "<class 'bool'>"
                },
                {
                  "name": "max_turns",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "inf",
                  "annotation": "<class 'int'>"
                },
                {
                  "name": "execute_tools",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "<class 'bool'>"
                }
              ],
              "return_annotation": "<class 'swarm.types.Response'>",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
            },
            "run_and_stream": {
              "name": "run_and_stream",
              "qualname": "Swarm.run_and_stream",
              "module": "swarm.core",
              "doc": null,
              "annotations": {
                "agent": "<class 'swarm.types.Agent'>",
                "messages": "typing.List",
                "context_variables": "<class 'dict'>",
                "model_override": "<class 'str'>",
                "debug": "<class 'bool'>",
                "max_turns": "<class 'int'>",
                "execute_tools": "<class 'bool'>"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "agent",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'swarm.types.Agent'>"
                },
                {
                  "name": "messages",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "typing.List"
                },
                {
                  "name": "context_variables",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "{}",
                  "annotation": "<class 'dict'>"
                },
                {
                  "name": "model_override",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "<class 'str'>"
                },
                {
                  "name": "debug",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "False",
                  "annotation": "<class 'bool'>"
                },
                {
                  "name": "max_turns",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "inf",
                  "annotation": "<class 'int'>"
                },
                {
                  "name": "execute_tools",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "<class 'bool'>"
                }
              ],
              "return_annotation": "Any",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
            }
          },
          "attributes": {},
          "annotations": {},
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/core.py"
        },
        "defaultdict": {
          "name": "defaultdict",
          "qualname": "defaultdict",
          "module": "collections",
          "doc": "defaultdict(default_factory=None, /, [...]) --> dict with default factory\n\nThe default factory is called without arguments to produce\na new value when a key is not present, in __getitem__ only.\nA defaultdict compares equal to a dict with the same items.\nAll remaining arguments are treated the same as if they were\npassed to the dict constructor, including keyword arguments.",
          "bases": [
            "dict"
          ],
          "methods": {},
          "attributes": {
            "default_factory": "member_descriptor"
          },
          "annotations": {},
          "source_file": "/usr/lib/python3.10/collections/__init__.py"
        }
      },
      "functions": {
        "debug_print": {
          "name": "debug_print",
          "qualname": "debug_print",
          "module": "swarm.util",
          "doc": null,
          "annotations": {
            "debug": "<class 'bool'>",
            "args": "<class 'str'>",
            "return": "None"
          },
          "parameters": [
            {
              "name": "debug",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'bool'>"
            },
            {
              "name": "args",
              "kind": "VAR_POSITIONAL",
              "default": null,
              "annotation": "<class 'str'>"
            }
          ],
          "return_annotation": "None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/util.py"
        },
        "function_to_json": {
          "name": "function_to_json",
          "qualname": "function_to_json",
          "module": "swarm.util",
          "doc": "Converts a Python function into a JSON-serializable dictionary\nthat describes the function's signature, including its name,\ndescription, and parameters.\n\nArgs:\n    func: The function to be converted.\n\nReturns:\n    A dictionary representing the function's signature in JSON format.",
          "annotations": {
            "return": "<class 'dict'>"
          },
          "parameters": [
            {
              "name": "func",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "<class 'dict'>",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/util.py"
        },
        "merge_chunk": {
          "name": "merge_chunk",
          "qualname": "merge_chunk",
          "module": "swarm.util",
          "doc": null,
          "annotations": {
            "final_response": "<class 'dict'>",
            "delta": "<class 'dict'>",
            "return": "None"
          },
          "parameters": [
            {
              "name": "final_response",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'dict'>"
            },
            {
              "name": "delta",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'dict'>"
            }
          ],
          "return_annotation": "None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/util.py"
        }
      },
      "submodules": {},
      "constants": {}
    },
    "types": {
      "name": "swarm.types",
      "doc": null,
      "file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py",
      "classes": {
        "Agent": {
          "name": "Agent",
          "qualname": "Agent",
          "module": "swarm.types",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "model_construct",
              "qualname": "BaseModel.model_construct",
              "module": "pydantic.main",
              "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "name": "<class 'str'>",
            "model": "<class 'str'>",
            "instructions": "typing.Union[str, typing.Callable[[], str]]",
            "functions": "typing.List[typing.Callable[[], typing.Union[str, ForwardRef('Agent'), dict]]]",
            "tool_choice": "<class 'str'>",
            "parallel_tool_calls": "<class 'bool'>"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py"
        },
        "BaseModel": {
          "name": "BaseModel",
          "qualname": "BaseModel",
          "module": "pydantic.main",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "model_construct",
              "qualname": "BaseModel.model_construct",
              "module": "pydantic.main",
              "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict",
            "model_fields": "property",
            "model_computed_fields": "property",
            "model_extra": "property",
            "model_fields_set": "property",
            "model_construct": "classmethod",
            "model_json_schema": "classmethod",
            "model_parametrized_name": "classmethod",
            "model_rebuild": "classmethod",
            "model_validate": "classmethod",
            "model_validate_json": "classmethod",
            "model_validate_strings": "classmethod",
            "parse_obj": "classmethod",
            "parse_raw": "classmethod",
            "parse_file": "classmethod",
            "from_orm": "classmethod",
            "construct": "classmethod",
            "schema": "classmethod",
            "schema_json": "classmethod",
            "validate": "classmethod",
            "update_forward_refs": "classmethod"
          },
          "annotations": {},
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
        },
        "ChatCompletionMessage": {
          "name": "ChatCompletionMessage",
          "qualname": "ChatCompletionMessage",
          "module": "openai.types.chat.chat_completion_message",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "to_dict": {
              "name": "to_dict",
              "qualname": "BaseModel.to_dict",
              "module": "openai._models",
              "doc": "Recursively generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    mode:\n        If mode is 'json', the dictionary will only contain JSON serializable types. e.g. `datetime` will be turned into a string, `\"2024-3-22T18:11:19.117000Z\"`.\n        If mode is 'python', the dictionary may contain any Python objects. e.g. `datetime(2024, 3, 22)`\n\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value from the output.\n    exclude_none: Whether to exclude fields that have a value of `None` from the output.\n    warnings: Whether to log warnings when invalid fields are encountered. This is only supported in Pydantic v2.",
              "annotations": {
                "mode": "Literal['json', 'python']",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "dict[str, object]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python']"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, object]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "to_json": {
              "name": "to_json",
              "qualname": "BaseModel.to_json",
              "module": "openai._models",
              "doc": "Generates a JSON string representing this model as it would be received from or sent to the API (but with indentation).\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    indent: Indentation to use in the JSON output. If `None` is passed, the output will be compact. Defaults to `2`\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that have the default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    warnings: Whether to show any warnings that occurred during serialization. This is only supported in Pydantic v2.",
              "annotations": {
                "indent": "int | None",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int | None"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "content": "typing.Optional[str]",
            "refusal": "typing.Optional[str]",
            "role": "typing.Literal['assistant']",
            "audio": "typing.Optional[openai.types.chat.chat_completion_audio.ChatCompletionAudio]",
            "function_call": "typing.Optional[openai.types.chat.chat_completion_message.FunctionCall]",
            "tool_calls": "typing.Optional[typing.List[openai.types.chat.chat_completion_message_tool_call.ChatCompletionMessageToolCall]]"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/types/chat/chat_completion_message.py"
        },
        "ChatCompletionMessageToolCall": {
          "name": "ChatCompletionMessageToolCall",
          "qualname": "ChatCompletionMessageToolCall",
          "module": "openai.types.chat.chat_completion_message_tool_call",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "to_dict": {
              "name": "to_dict",
              "qualname": "BaseModel.to_dict",
              "module": "openai._models",
              "doc": "Recursively generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    mode:\n        If mode is 'json', the dictionary will only contain JSON serializable types. e.g. `datetime` will be turned into a string, `\"2024-3-22T18:11:19.117000Z\"`.\n        If mode is 'python', the dictionary may contain any Python objects. e.g. `datetime(2024, 3, 22)`\n\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value from the output.\n    exclude_none: Whether to exclude fields that have a value of `None` from the output.\n    warnings: Whether to log warnings when invalid fields are encountered. This is only supported in Pydantic v2.",
              "annotations": {
                "mode": "Literal['json', 'python']",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "dict[str, object]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python']"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, object]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "to_json": {
              "name": "to_json",
              "qualname": "BaseModel.to_json",
              "module": "openai._models",
              "doc": "Generates a JSON string representing this model as it would be received from or sent to the API (but with indentation).\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    indent: Indentation to use in the JSON output. If `None` is passed, the output will be compact. Defaults to `2`\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that have the default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    warnings: Whether to show any warnings that occurred during serialization. This is only supported in Pydantic v2.",
              "annotations": {
                "indent": "int | None",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int | None"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "id": "<class 'str'>",
            "function": "<class 'openai.types.chat.chat_completion_message_tool_call.Function'>",
            "type": "typing.Literal['function']"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/types/chat/chat_completion_message_tool_call.py"
        },
        "Function": {
          "name": "Function",
          "qualname": "Function",
          "module": "openai.types.chat.chat_completion_message_tool_call",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "openai._models",
              "doc": null,
              "annotations": {
                "cls": "Type[ModelT]",
                "_fields_set": "set[str] | None",
                "values": "object",
                "return": "ModelT"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "object"
                }
              ],
              "return_annotation": "ModelT",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "to_dict": {
              "name": "to_dict",
              "qualname": "BaseModel.to_dict",
              "module": "openai._models",
              "doc": "Recursively generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    mode:\n        If mode is 'json', the dictionary will only contain JSON serializable types. e.g. `datetime` will be turned into a string, `\"2024-3-22T18:11:19.117000Z\"`.\n        If mode is 'python', the dictionary may contain any Python objects. e.g. `datetime(2024, 3, 22)`\n\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value from the output.\n    exclude_none: Whether to exclude fields that have a value of `None` from the output.\n    warnings: Whether to log warnings when invalid fields are encountered. This is only supported in Pydantic v2.",
              "annotations": {
                "mode": "Literal['json', 'python']",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "dict[str, object]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python']"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, object]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "to_json": {
              "name": "to_json",
              "qualname": "BaseModel.to_json",
              "module": "openai._models",
              "doc": "Generates a JSON string representing this model as it would be received from or sent to the API (but with indentation).\n\nBy default, fields that were not set by the API will not be included,\nand keys will match the API response, *not* the property names from the model.\n\nFor example, if the API responds with `\"fooBar\": true` but we've defined a `foo_bar: bool` property,\nthe output will use the `\"fooBar\"` key (unless `use_api_names=False` is passed).\n\nArgs:\n    indent: Indentation to use in the JSON output. If `None` is passed, the output will be compact. Defaults to `2`\n    use_api_names: Whether to use the key that the API responded with or the property name. Defaults to `True`.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that have the default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    warnings: Whether to show any warnings that occurred during serialization. This is only supported in Pydantic v2.",
              "annotations": {
                "indent": "int | None",
                "use_api_names": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "warnings": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int | None"
                },
                {
                  "name": "use_api_names",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/_models.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "arguments": "<class 'str'>",
            "name": "<class 'str'>"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/openai/types/chat/chat_completion_message_tool_call.py"
        },
        "Response": {
          "name": "Response",
          "qualname": "Response",
          "module": "swarm.types",
          "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "model_construct",
              "qualname": "BaseModel.model_construct",
              "module": "pydantic.main",
              "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "messages": "typing.List",
            "agent": "typing.Optional[swarm.types.Agent]",
            "context_variables": "<class 'dict'>"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py"
        },
        "Result": {
          "name": "Result",
          "qualname": "Result",
          "module": "swarm.types",
          "doc": "Encapsulates the possible return values for an agent function.\n\nAttributes:\n    value (str): The result value as a string.\n    agent (Agent): The agent instance, if applicable.\n    context_variables (dict): A dictionary of context variables.",
          "bases": [
            "BaseModel"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "model_construct",
              "qualname": "BaseModel.model_construct",
              "module": "pydantic.main",
              "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "value": "<class 'str'>",
            "agent": "typing.Optional[swarm.types.Agent]",
            "context_variables": "<class 'dict'>"
          },
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/types.py"
        }
      },
      "functions": {},
      "submodules": {},
      "constants": {}
    },
    "util": {
      "name": "swarm.util",
      "doc": null,
      "file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/util.py",
      "classes": {
        "datetime": {
          "name": "datetime",
          "qualname": "datetime",
          "module": "datetime",
          "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints.",
          "bases": [
            "date"
          ],
          "methods": {},
          "attributes": {
            "hour": "getset_descriptor",
            "minute": "getset_descriptor",
            "second": "getset_descriptor",
            "microsecond": "getset_descriptor",
            "tzinfo": "getset_descriptor",
            "fold": "getset_descriptor",
            "min": "datetime",
            "max": "datetime",
            "resolution": "timedelta"
          },
          "annotations": {},
          "source_file": "/usr/lib/python3.10/datetime.py"
        }
      },
      "functions": {
        "debug_print": {
          "name": "debug_print",
          "qualname": "debug_print",
          "module": "swarm.util",
          "doc": null,
          "annotations": {
            "debug": "<class 'bool'>",
            "args": "<class 'str'>",
            "return": "None"
          },
          "parameters": [
            {
              "name": "debug",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'bool'>"
            },
            {
              "name": "args",
              "kind": "VAR_POSITIONAL",
              "default": null,
              "annotation": "<class 'str'>"
            }
          ],
          "return_annotation": "None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/util.py"
        },
        "function_to_json": {
          "name": "function_to_json",
          "qualname": "function_to_json",
          "module": "swarm.util",
          "doc": "Converts a Python function into a JSON-serializable dictionary\nthat describes the function's signature, including its name,\ndescription, and parameters.\n\nArgs:\n    func: The function to be converted.\n\nReturns:\n    A dictionary representing the function's signature in JSON format.",
          "annotations": {
            "return": "<class 'dict'>"
          },
          "parameters": [
            {
              "name": "func",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "<class 'dict'>",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/util.py"
        },
        "merge_chunk": {
          "name": "merge_chunk",
          "qualname": "merge_chunk",
          "module": "swarm.util",
          "doc": null,
          "annotations": {
            "final_response": "<class 'dict'>",
            "delta": "<class 'dict'>",
            "return": "None"
          },
          "parameters": [
            {
              "name": "final_response",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'dict'>"
            },
            {
              "name": "delta",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'dict'>"
            }
          ],
          "return_annotation": "None",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/util.py"
        },
        "merge_fields": {
          "name": "merge_fields",
          "qualname": "merge_fields",
          "module": "swarm.util",
          "doc": null,
          "annotations": {},
          "parameters": [
            {
              "name": "target",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "source",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Any",
          "is_coroutine": false,
          "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/swarm/util.py"
        }
      },
      "submodules": {},
      "constants": {}
    }
  },
  "constants": {}
}