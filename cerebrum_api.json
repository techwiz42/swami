{
  "name": "cerebrum",
  "doc": null,
  "file": "/home/swami/Cerebrum/cerebrum/__init__.py",
  "classes": {
    "Cerebrum": {
      "name": "Cerebrum",
      "qualname": "Cerebrum",
      "module": "cerebrum.client",
      "doc": null,
      "bases": [],
      "methods": {
        "add_llm_layer": {
          "name": "add_llm_layer",
          "qualname": "Cerebrum.add_llm_layer",
          "module": "cerebrum.client",
          "doc": "Set up the LLM core component.",
          "annotations": {
            "config": "<class 'cerebrum.llm.layer.LLMLayer'>",
            "return": "Cerebrum"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "config",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'cerebrum.llm.layer.LLMLayer'>"
            }
          ],
          "return_annotation": "Cerebrum",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "add_memory_layer": {
          "name": "add_memory_layer",
          "qualname": "Cerebrum.add_memory_layer",
          "module": "cerebrum.client",
          "doc": "Set up the memory manager component.",
          "annotations": {
            "config": "<class 'cerebrum.memory.layer.MemoryLayer'>",
            "return": "Cerebrum"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "config",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'cerebrum.memory.layer.MemoryLayer'>"
            }
          ],
          "return_annotation": "Cerebrum",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "add_storage_layer": {
          "name": "add_storage_layer",
          "qualname": "Cerebrum.add_storage_layer",
          "module": "cerebrum.client",
          "doc": "Set up the storage manager component.",
          "annotations": {
            "config": "<class 'cerebrum.storage.layer.StorageLayer'>",
            "return": "Cerebrum"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "config",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'cerebrum.storage.layer.StorageLayer'>"
            }
          ],
          "return_annotation": "Cerebrum",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "add_tool_layer": {
          "name": "add_tool_layer",
          "qualname": "Cerebrum.add_tool_layer",
          "module": "cerebrum.client",
          "doc": "Set up the tool manager component.",
          "annotations": {
            "config": "<class 'cerebrum.tool.layer.ToolLayer'>",
            "return": "Cerebrum"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "config",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'cerebrum.tool.layer.ToolLayer'>"
            }
          ],
          "return_annotation": "Cerebrum",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "cleanup": {
          "name": "cleanup",
          "qualname": "Cerebrum.cleanup",
          "module": "cerebrum.client",
          "doc": "Clean up all active components.",
          "annotations": {
            "return": "typing.Dict[str, typing.Any]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "typing.Dict[str, typing.Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "connect": {
          "name": "connect",
          "qualname": "Cerebrum.connect",
          "module": "cerebrum.client",
          "doc": null,
          "annotations": {
            "return": "Cerebrum"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Cerebrum",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "execute": {
          "name": "execute",
          "qualname": "Cerebrum.execute",
          "module": "cerebrum.client",
          "doc": "Submit an agent for execution.",
          "annotations": {
            "agent_id": "<class 'str'>",
            "agent_config": "typing.Dict[str, typing.Any]",
            "return": "typing.Dict[str, typing.Any]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "agent_id",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'str'>"
            },
            {
              "name": "agent_config",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "typing.Dict[str, typing.Any]"
            }
          ],
          "return_annotation": "typing.Dict[str, typing.Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "get_agent_status": {
          "name": "get_agent_status",
          "qualname": "Cerebrum.get_agent_status",
          "module": "cerebrum.client",
          "doc": "Get the status of a submitted agent.",
          "annotations": {
            "execution_id": "<class 'str'>",
            "return": "typing.Dict[str, typing.Any]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "execution_id",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'str'>"
            }
          ],
          "return_annotation": "typing.Dict[str, typing.Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "get_status": {
          "name": "get_status",
          "qualname": "Cerebrum.get_status",
          "module": "cerebrum.client",
          "doc": "Get the status of all core components.",
          "annotations": {
            "return": "typing.Dict[str, str]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "typing.Dict[str, str]",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "override_scheduler": {
          "name": "override_scheduler",
          "qualname": "Cerebrum.override_scheduler",
          "module": "cerebrum.client",
          "doc": "Set up the FIFO scheduler with all components.",
          "annotations": {
            "config": "<class 'cerebrum.overrides.layer.OverridesLayer'>",
            "return": "Cerebrum"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "config",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'cerebrum.overrides.layer.OverridesLayer'>"
            }
          ],
          "return_annotation": "Cerebrum",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "poll_agent": {
          "name": "poll_agent",
          "qualname": "Cerebrum.poll_agent",
          "module": "cerebrum.client",
          "doc": "Wait for an agent to complete execution.",
          "annotations": {
            "execution_id": "<class 'str'>",
            "polling_interval": "<class 'float'>",
            "timeout": "typing.Optional[float]",
            "return": "typing.Dict[str, typing.Any]"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "execution_id",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'str'>"
            },
            {
              "name": "polling_interval",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "1.0",
              "annotation": "<class 'float'>"
            },
            {
              "name": "timeout",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": "None",
              "annotation": "typing.Optional[float]"
            }
          ],
          "return_annotation": "typing.Dict[str, typing.Any]",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "setup_agent_factory": {
          "name": "setup_agent_factory",
          "qualname": "Cerebrum.setup_agent_factory",
          "module": "cerebrum.client",
          "doc": "Set up the agent factory for managing agent execution.",
          "annotations": {
            "config": "<class 'cerebrum.overrides.layer.OverridesLayer'>",
            "return": "Cerebrum"
          },
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "config",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "<class 'cerebrum.overrides.layer.OverridesLayer'>"
            }
          ],
          "return_annotation": "Cerebrum",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        }
      },
      "attributes": {},
      "annotations": {},
      "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
    },
    "Config": {
      "name": "Config",
      "qualname": "Config",
      "module": "cerebrum",
      "doc": null,
      "bases": [],
      "methods": {
        "configure": {
          "name": "configure",
          "qualname": "Config.configure",
          "module": "cerebrum",
          "doc": "Configure multiple settings at once",
          "annotations": {},
          "parameters": [
            {
              "name": "self",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "kwargs",
              "kind": "VAR_KEYWORD",
              "default": null,
              "annotation": "Any"
            }
          ],
          "return_annotation": "Any",
          "is_coroutine": false,
          "source_file": "/home/swami/Cerebrum/cerebrum/__init__.py"
        }
      },
      "attributes": {
        "global_client": "property"
      },
      "annotations": {},
      "source_file": "/home/swami/Cerebrum/cerebrum/__init__.py"
    }
  },
  "functions": {},
  "submodules": {
    "client": {
      "name": "cerebrum.client",
      "doc": null,
      "file": "/home/swami/Cerebrum/cerebrum/client/__init__.py",
      "classes": {
        "Cerebrum": {
          "name": "Cerebrum",
          "qualname": "Cerebrum",
          "module": "cerebrum.client",
          "doc": null,
          "bases": [],
          "methods": {
            "add_llm_layer": {
              "name": "add_llm_layer",
              "qualname": "Cerebrum.add_llm_layer",
              "module": "cerebrum.client",
              "doc": "Set up the LLM core component.",
              "annotations": {
                "config": "<class 'cerebrum.llm.layer.LLMLayer'>",
                "return": "Cerebrum"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "config",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'cerebrum.llm.layer.LLMLayer'>"
                }
              ],
              "return_annotation": "Cerebrum",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "add_memory_layer": {
              "name": "add_memory_layer",
              "qualname": "Cerebrum.add_memory_layer",
              "module": "cerebrum.client",
              "doc": "Set up the memory manager component.",
              "annotations": {
                "config": "<class 'cerebrum.memory.layer.MemoryLayer'>",
                "return": "Cerebrum"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "config",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'cerebrum.memory.layer.MemoryLayer'>"
                }
              ],
              "return_annotation": "Cerebrum",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "add_storage_layer": {
              "name": "add_storage_layer",
              "qualname": "Cerebrum.add_storage_layer",
              "module": "cerebrum.client",
              "doc": "Set up the storage manager component.",
              "annotations": {
                "config": "<class 'cerebrum.storage.layer.StorageLayer'>",
                "return": "Cerebrum"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "config",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'cerebrum.storage.layer.StorageLayer'>"
                }
              ],
              "return_annotation": "Cerebrum",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "add_tool_layer": {
              "name": "add_tool_layer",
              "qualname": "Cerebrum.add_tool_layer",
              "module": "cerebrum.client",
              "doc": "Set up the tool manager component.",
              "annotations": {
                "config": "<class 'cerebrum.tool.layer.ToolLayer'>",
                "return": "Cerebrum"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "config",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'cerebrum.tool.layer.ToolLayer'>"
                }
              ],
              "return_annotation": "Cerebrum",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "cleanup": {
              "name": "cleanup",
              "qualname": "Cerebrum.cleanup",
              "module": "cerebrum.client",
              "doc": "Clean up all active components.",
              "annotations": {
                "return": "typing.Dict[str, typing.Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "typing.Dict[str, typing.Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "connect": {
              "name": "connect",
              "qualname": "Cerebrum.connect",
              "module": "cerebrum.client",
              "doc": null,
              "annotations": {
                "return": "Cerebrum"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Cerebrum",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "execute": {
              "name": "execute",
              "qualname": "Cerebrum.execute",
              "module": "cerebrum.client",
              "doc": "Submit an agent for execution.",
              "annotations": {
                "agent_id": "<class 'str'>",
                "agent_config": "typing.Dict[str, typing.Any]",
                "return": "typing.Dict[str, typing.Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "agent_id",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'str'>"
                },
                {
                  "name": "agent_config",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "typing.Dict[str, typing.Any]"
                }
              ],
              "return_annotation": "typing.Dict[str, typing.Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "get_agent_status": {
              "name": "get_agent_status",
              "qualname": "Cerebrum.get_agent_status",
              "module": "cerebrum.client",
              "doc": "Get the status of a submitted agent.",
              "annotations": {
                "execution_id": "<class 'str'>",
                "return": "typing.Dict[str, typing.Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "execution_id",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'str'>"
                }
              ],
              "return_annotation": "typing.Dict[str, typing.Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "get_status": {
              "name": "get_status",
              "qualname": "Cerebrum.get_status",
              "module": "cerebrum.client",
              "doc": "Get the status of all core components.",
              "annotations": {
                "return": "typing.Dict[str, str]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "typing.Dict[str, str]",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "override_scheduler": {
              "name": "override_scheduler",
              "qualname": "Cerebrum.override_scheduler",
              "module": "cerebrum.client",
              "doc": "Set up the FIFO scheduler with all components.",
              "annotations": {
                "config": "<class 'cerebrum.overrides.layer.OverridesLayer'>",
                "return": "Cerebrum"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "config",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'cerebrum.overrides.layer.OverridesLayer'>"
                }
              ],
              "return_annotation": "Cerebrum",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "poll_agent": {
              "name": "poll_agent",
              "qualname": "Cerebrum.poll_agent",
              "module": "cerebrum.client",
              "doc": "Wait for an agent to complete execution.",
              "annotations": {
                "execution_id": "<class 'str'>",
                "polling_interval": "<class 'float'>",
                "timeout": "typing.Optional[float]",
                "return": "typing.Dict[str, typing.Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "execution_id",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'str'>"
                },
                {
                  "name": "polling_interval",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "1.0",
                  "annotation": "<class 'float'>"
                },
                {
                  "name": "timeout",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "typing.Optional[float]"
                }
              ],
              "return_annotation": "typing.Dict[str, typing.Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            },
            "setup_agent_factory": {
              "name": "setup_agent_factory",
              "qualname": "Cerebrum.setup_agent_factory",
              "module": "cerebrum.client",
              "doc": "Set up the agent factory for managing agent execution.",
              "annotations": {
                "config": "<class 'cerebrum.overrides.layer.OverridesLayer'>",
                "return": "Cerebrum"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "config",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "<class 'cerebrum.overrides.layer.OverridesLayer'>"
                }
              ],
              "return_annotation": "Cerebrum",
              "is_coroutine": false,
              "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
            }
          },
          "attributes": {},
          "annotations": {},
          "source_file": "/home/swami/Cerebrum/cerebrum/client/__init__.py"
        },
        "LLMLayer": {
          "name": "LLMLayer",
          "qualname": "LLMLayer",
          "module": "cerebrum.llm.layer",
          "doc": "LLMLayer(llm_name: str, max_gpu_memory: dict | None = None, eval_device: str = 'cuda:0', max_new_tokens: int = 2048, log_mode: str = 'console', llm_backend: str = 'default')",
          "bases": [],
          "methods": {},
          "attributes": {
            "max_gpu_memory": "NoneType",
            "eval_device": "str",
            "max_new_tokens": "int",
            "log_mode": "str",
            "llm_backend": "str"
          },
          "annotations": {
            "llm_name": "<class 'str'>",
            "max_gpu_memory": "dict | None",
            "eval_device": "<class 'str'>",
            "max_new_tokens": "<class 'int'>",
            "log_mode": "<class 'str'>",
            "llm_backend": "<class 'str'>"
          },
          "source_file": "/home/swami/Cerebrum/cerebrum/llm/layer.py"
        },
        "LLMQuery": {
          "name": "LLMQuery",
          "qualname": "LLMQuery",
          "module": "cerebrum.llm.communication",
          "doc": "Query class represents the input structure for performing various actions.\n\nAttributes:\n    messages (List[Dict[str, Union[str, Any]]]): A list of dictionaries where each dictionary\n        represents a message containing 'role' and 'content' or other key-value pairs.\n    tools (Optional[List[Dict[str, Any]]]): An optional list of JSON-like objects (dictionaries) \n        representing tools and their parameters. Default is an empty list.\n    action_type (Literal): A string that must be one of \"message_llm\", \"call_tool\", or \"operate_file\".\n        This restricts the type of action the query performs.\n    message_return_type (str): The type of the response message. Default is \"text\".",
          "bases": [
            "Request"
          ],
          "methods": {
            "construct": {
              "name": "construct",
              "qualname": "BaseModel.construct",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "copy": {
              "name": "copy",
              "qualname": "BaseModel.copy",
              "module": "pydantic.main",
              "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
              "annotations": {
                "include": "AbstractSetIntStr | MappingIntStrAny | None",
                "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                "update": "Dict[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Dict[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "dict": {
              "name": "dict",
              "qualname": "BaseModel.dict",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "from_orm": {
              "name": "from_orm",
              "qualname": "BaseModel.from_orm",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "json": {
              "name": "json",
              "qualname": "BaseModel.json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "encoder": "Callable[[Any], Any] | None",
                "models_as_dict": "bool",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "encoder",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[Any], Any] | None"
                },
                {
                  "name": "models_as_dict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_construct": {
              "name": "model_construct",
              "qualname": "BaseModel.model_construct",
              "module": "pydantic.main",
              "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
              "annotations": {
                "_fields_set": "set[str] | None",
                "values": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "_fields_set",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "None",
                  "annotation": "set[str] | None"
                },
                {
                  "name": "values",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_copy": {
              "name": "model_copy",
              "qualname": "BaseModel.model_copy",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
              "annotations": {
                "update": "Mapping[str, Any] | None",
                "deep": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "update",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Mapping[str, Any] | None"
                },
                {
                  "name": "deep",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump": {
              "name": "model_dump",
              "qualname": "BaseModel.model_dump",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
              "annotations": {
                "mode": "Literal['json', 'python'] | str",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "python",
                  "annotation": "Literal['json', 'python'] | str"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_dump_json": {
              "name": "model_dump_json",
              "qualname": "BaseModel.model_dump_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
              "annotations": {
                "indent": "int | None",
                "include": "IncEx | None",
                "exclude": "IncEx | None",
                "context": "Any | None",
                "by_alias": "bool",
                "exclude_unset": "bool",
                "exclude_defaults": "bool",
                "exclude_none": "bool",
                "round_trip": "bool",
                "warnings": "bool | Literal['none', 'warn', 'error']",
                "serialize_as_any": "bool",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "indent",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "int | None"
                },
                {
                  "name": "include",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "IncEx | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                },
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_unset",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_defaults",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "exclude_none",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "round_trip",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "warnings",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool | Literal['none', 'warn', 'error']"
                },
                {
                  "name": "serialize_as_any",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_json_schema": {
              "name": "model_json_schema",
              "qualname": "BaseModel.model_json_schema",
              "module": "pydantic.main",
              "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "schema_generator": "type[GenerateJsonSchema]",
                "mode": "JsonSchemaMode",
                "return": "dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "schema_generator",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                  "annotation": "type[GenerateJsonSchema]"
                },
                {
                  "name": "mode",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "validation",
                  "annotation": "JsonSchemaMode"
                }
              ],
              "return_annotation": "dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_parametrized_name": {
              "name": "model_parametrized_name",
              "qualname": "BaseModel.model_parametrized_name",
              "module": "pydantic.main",
              "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
              "annotations": {
                "params": "tuple[type[Any], ...]",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "params",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "tuple[type[Any], ...]"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_post_init": {
              "name": "model_post_init",
              "qualname": "BaseModel.model_post_init",
              "module": "pydantic.main",
              "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
              "annotations": {
                "_BaseModel__context": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "self",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "_BaseModel__context",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_rebuild": {
              "name": "model_rebuild",
              "qualname": "BaseModel.model_rebuild",
              "module": "pydantic.main",
              "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
              "annotations": {
                "force": "bool",
                "raise_errors": "bool",
                "_parent_namespace_depth": "int",
                "_types_namespace": "MappingNamespace | None",
                "return": "bool | None"
              },
              "parameters": [
                {
                  "name": "force",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                },
                {
                  "name": "raise_errors",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "_parent_namespace_depth",
                  "kind": "KEYWORD_ONLY",
                  "default": "2",
                  "annotation": "int"
                },
                {
                  "name": "_types_namespace",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "MappingNamespace | None"
                }
              ],
              "return_annotation": "bool | None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate": {
              "name": "model_validate",
              "qualname": "BaseModel.model_validate",
              "module": "pydantic.main",
              "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "from_attributes": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "from_attributes",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_json": {
              "name": "model_validate_json",
              "qualname": "BaseModel.model_validate_json",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
              "annotations": {
                "json_data": "str | bytes | bytearray",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "json_data",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes | bytearray"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "model_validate_strings": {
              "name": "model_validate_strings",
              "qualname": "BaseModel.model_validate_strings",
              "module": "pydantic.main",
              "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
              "annotations": {
                "obj": "Any",
                "strict": "bool | None",
                "context": "Any | None",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "bool | None"
                },
                {
                  "name": "context",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "Any | None"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_file": {
              "name": "parse_file",
              "qualname": "BaseModel.parse_file",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "path": "str | Path",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "path",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | Path"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_obj": {
              "name": "parse_obj",
              "qualname": "BaseModel.parse_obj",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "obj": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "obj",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "parse_raw": {
              "name": "parse_raw",
              "qualname": "BaseModel.parse_raw",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "b": "str | bytes",
                "content_type": "str | None",
                "encoding": "str",
                "proto": "DeprecatedParseProtocol | None",
                "allow_pickle": "bool",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "b",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "str | bytes"
                },
                {
                  "name": "content_type",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "str | None"
                },
                {
                  "name": "encoding",
                  "kind": "KEYWORD_ONLY",
                  "default": "utf8",
                  "annotation": "str"
                },
                {
                  "name": "proto",
                  "kind": "KEYWORD_ONLY",
                  "default": "None",
                  "annotation": "DeprecatedParseProtocol | None"
                },
                {
                  "name": "allow_pickle",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "bool"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema": {
              "name": "schema",
              "qualname": "BaseModel.schema",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "return": "Dict[str, Any]"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                }
              ],
              "return_annotation": "Dict[str, Any]",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "schema_json": {
              "name": "schema_json",
              "qualname": "BaseModel.schema_json",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "by_alias": "bool",
                "ref_template": "str",
                "dumps_kwargs": "Any",
                "return": "str"
              },
              "parameters": [
                {
                  "name": "by_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "bool"
                },
                {
                  "name": "ref_template",
                  "kind": "KEYWORD_ONLY",
                  "default": "#/$defs/{model}",
                  "annotation": "str"
                },
                {
                  "name": "dumps_kwargs",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "str",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "update_forward_refs": {
              "name": "update_forward_refs",
              "qualname": "BaseModel.update_forward_refs",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "localns": "Any",
                "return": "None"
              },
              "parameters": [
                {
                  "name": "localns",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "None",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "validate": {
              "name": "validate",
              "qualname": "BaseModel.validate",
              "module": "pydantic.main",
              "doc": null,
              "annotations": {
                "value": "Any",
                "return": "Self"
              },
              "parameters": [
                {
                  "name": "value",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": null,
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Self",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            }
          },
          "attributes": {
            "model_config": "dict"
          },
          "annotations": {
            "messages": "typing.List[typing.Dict[str, typing.Union[str, typing.Any]]]",
            "tools": "typing.Optional[typing.List[typing.Dict[str, typing.Any]]]",
            "action_type": "typing.Literal['chat', 'tool_use', 'operate_file']",
            "message_return_type": "<class 'str'>"
          },
          "source_file": "/home/swami/Cerebrum/cerebrum/llm/communication.py"
        },
        "MemoryLayer": {
          "name": "MemoryLayer",
          "qualname": "MemoryLayer",
          "module": "cerebrum.memory.layer",
          "doc": "MemoryLayer(memory_limit: int = 104857600, eviction_k: int = 10, custom_eviction_policy: Optional[str] = None)",
          "bases": [],
          "methods": {},
          "attributes": {
            "memory_limit": "int",
            "eviction_k": "int",
            "custom_eviction_policy": "NoneType"
          },
          "annotations": {
            "memory_limit": "<class 'int'>",
            "eviction_k": "<class 'int'>",
            "custom_eviction_policy": "typing.Optional[str]"
          },
          "source_file": "/home/swami/Cerebrum/cerebrum/memory/layer.py"
        },
        "OverridesLayer": {
          "name": "OverridesLayer",
          "qualname": "OverridesLayer",
          "module": "cerebrum.overrides.layer",
          "doc": "OverridesLayer(log_mode: str = 'console', max_workers: int = 64, custom_syscalls: Optional[Dict[str, Any]] = None)",
          "bases": [],
          "methods": {},
          "attributes": {
            "log_mode": "str",
            "max_workers": "int",
            "custom_syscalls": "NoneType"
          },
          "annotations": {
            "log_mode": "<class 'str'>",
            "max_workers": "<class 'int'>",
            "custom_syscalls": "typing.Optional[typing.Dict[str, typing.Any]]"
          },
          "source_file": "/home/swami/Cerebrum/cerebrum/overrides/layer.py"
        },
        "StorageLayer": {
          "name": "StorageLayer",
          "qualname": "StorageLayer",
          "module": "cerebrum.storage.layer",
          "doc": "StorageLayer(root_dir: str = 'root', use_vector_db: bool = False, vector_db_config: Optional[Dict[str, Any]] = None)",
          "bases": [],
          "methods": {},
          "attributes": {
            "root_dir": "str",
            "use_vector_db": "bool",
            "vector_db_config": "NoneType"
          },
          "annotations": {
            "root_dir": "<class 'str'>",
            "use_vector_db": "<class 'bool'>",
            "vector_db_config": "typing.Optional[typing.Dict[str, typing.Any]]"
          },
          "source_file": "/home/swami/Cerebrum/cerebrum/storage/layer.py"
        },
        "ToolLayer": {
          "name": "ToolLayer",
          "qualname": "ToolLayer",
          "module": "cerebrum.tool.layer",
          "doc": "ToolLayer(allowed_tools: Optional[List[str]] = None, custom_tools: Optional[Dict[str, Any]] = None)",
          "bases": [],
          "methods": {},
          "attributes": {
            "allowed_tools": "NoneType",
            "custom_tools": "NoneType"
          },
          "annotations": {
            "allowed_tools": "typing.Optional[typing.List[str]]",
            "custom_tools": "typing.Optional[typing.Dict[str, typing.Any]]"
          },
          "source_file": "/home/swami/Cerebrum/cerebrum/tool/layer.py"
        }
      },
      "functions": {
        "asdict": {
          "name": "asdict",
          "qualname": "asdict",
          "module": "dataclasses",
          "doc": "Return the fields of a dataclass instance as a new dictionary mapping\nfield names to field values.\n\nExample usage:\n\n  @dataclass\n  class C:\n      x: int\n      y: int\n\n  c = C(1, 2)\n  assert asdict(c) == {'x': 1, 'y': 2}\n\nIf given, 'dict_factory' will be used instead of built-in dict.\nThe function applies recursively to field values that are\ndataclass instances. This will also look into built-in containers:\ntuples, lists, and dicts.",
          "annotations": {},
          "parameters": [
            {
              "name": "obj",
              "kind": "POSITIONAL_OR_KEYWORD",
              "default": null,
              "annotation": "Any"
            },
            {
              "name": "dict_factory",
              "kind": "KEYWORD_ONLY",
              "default": "<class 'dict'>",
              "annotation": "Any"
            }
          ],
          "return_annotation": "Any",
          "is_coroutine": false,
          "source_file": "/usr/lib/python3.10/dataclasses.py"
        }
      },
      "submodules": {},
      "constants": {}
    },
    "llm": {
      "name": "cerebrum.llm",
      "doc": null,
      "file": null,
      "classes": {},
      "functions": {},
      "submodules": {
        "communication": {
          "name": "cerebrum.llm.communication",
          "doc": null,
          "file": "/home/swami/Cerebrum/cerebrum/llm/communication.py",
          "classes": {
            "BaseModel": {
              "name": "BaseModel",
              "qualname": "BaseModel",
              "module": "pydantic.main",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
              "bases": [],
              "methods": {
                "construct": {
                  "name": "construct",
                  "qualname": "BaseModel.construct",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "_fields_set": "set[str] | None",
                    "values": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "_fields_set",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "None",
                      "annotation": "set[str] | None"
                    },
                    {
                      "name": "values",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "copy": {
                  "name": "copy",
                  "qualname": "BaseModel.copy",
                  "module": "pydantic.main",
                  "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
                  "annotations": {
                    "include": "AbstractSetIntStr | MappingIntStrAny | None",
                    "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                    "update": "Dict[str, Any] | None",
                    "deep": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                    },
                    {
                      "name": "update",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Dict[str, Any] | None"
                    },
                    {
                      "name": "deep",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "dict": {
                  "name": "dict",
                  "qualname": "BaseModel.dict",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "return": "Dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "from_orm": {
                  "name": "from_orm",
                  "qualname": "BaseModel.from_orm",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "obj": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "json": {
                  "name": "json",
                  "qualname": "BaseModel.json",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "encoder": "Callable[[Any], Any] | None",
                    "models_as_dict": "bool",
                    "dumps_kwargs": "Any",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "encoder",
                      "kind": "KEYWORD_ONLY",
                      "default": "PydanticUndefined",
                      "annotation": "Callable[[Any], Any] | None"
                    },
                    {
                      "name": "models_as_dict",
                      "kind": "KEYWORD_ONLY",
                      "default": "PydanticUndefined",
                      "annotation": "bool"
                    },
                    {
                      "name": "dumps_kwargs",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_construct": {
                  "name": "model_construct",
                  "qualname": "BaseModel.model_construct",
                  "module": "pydantic.main",
                  "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
                  "annotations": {
                    "_fields_set": "set[str] | None",
                    "values": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "_fields_set",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "None",
                      "annotation": "set[str] | None"
                    },
                    {
                      "name": "values",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_copy": {
                  "name": "model_copy",
                  "qualname": "BaseModel.model_copy",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
                  "annotations": {
                    "update": "Mapping[str, Any] | None",
                    "deep": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "update",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Mapping[str, Any] | None"
                    },
                    {
                      "name": "deep",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_dump": {
                  "name": "model_dump",
                  "qualname": "BaseModel.model_dump",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
                  "annotations": {
                    "mode": "Literal['json', 'python'] | str",
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "context": "Any | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "round_trip": "bool",
                    "warnings": "bool | Literal['none', 'warn', 'error']",
                    "serialize_as_any": "bool",
                    "return": "dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "mode",
                      "kind": "KEYWORD_ONLY",
                      "default": "python",
                      "annotation": "Literal['json', 'python'] | str"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "round_trip",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "warnings",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool | Literal['none', 'warn', 'error']"
                    },
                    {
                      "name": "serialize_as_any",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_dump_json": {
                  "name": "model_dump_json",
                  "qualname": "BaseModel.model_dump_json",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
                  "annotations": {
                    "indent": "int | None",
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "context": "Any | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "round_trip": "bool",
                    "warnings": "bool | Literal['none', 'warn', 'error']",
                    "serialize_as_any": "bool",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "indent",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "int | None"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "round_trip",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "warnings",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool | Literal['none', 'warn', 'error']"
                    },
                    {
                      "name": "serialize_as_any",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_json_schema": {
                  "name": "model_json_schema",
                  "qualname": "BaseModel.model_json_schema",
                  "module": "pydantic.main",
                  "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "schema_generator": "type[GenerateJsonSchema]",
                    "mode": "JsonSchemaMode",
                    "return": "dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    },
                    {
                      "name": "schema_generator",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                      "annotation": "type[GenerateJsonSchema]"
                    },
                    {
                      "name": "mode",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "validation",
                      "annotation": "JsonSchemaMode"
                    }
                  ],
                  "return_annotation": "dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_parametrized_name": {
                  "name": "model_parametrized_name",
                  "qualname": "BaseModel.model_parametrized_name",
                  "module": "pydantic.main",
                  "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
                  "annotations": {
                    "params": "tuple[type[Any], ...]",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "params",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "tuple[type[Any], ...]"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_post_init": {
                  "name": "model_post_init",
                  "qualname": "BaseModel.model_post_init",
                  "module": "pydantic.main",
                  "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
                  "annotations": {
                    "_BaseModel__context": "Any",
                    "return": "None"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "_BaseModel__context",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_rebuild": {
                  "name": "model_rebuild",
                  "qualname": "BaseModel.model_rebuild",
                  "module": "pydantic.main",
                  "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
                  "annotations": {
                    "force": "bool",
                    "raise_errors": "bool",
                    "_parent_namespace_depth": "int",
                    "_types_namespace": "MappingNamespace | None",
                    "return": "bool | None"
                  },
                  "parameters": [
                    {
                      "name": "force",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "raise_errors",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "_parent_namespace_depth",
                      "kind": "KEYWORD_ONLY",
                      "default": "2",
                      "annotation": "int"
                    },
                    {
                      "name": "_types_namespace",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "MappingNamespace | None"
                    }
                  ],
                  "return_annotation": "bool | None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate": {
                  "name": "model_validate",
                  "qualname": "BaseModel.model_validate",
                  "module": "pydantic.main",
                  "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
                  "annotations": {
                    "obj": "Any",
                    "strict": "bool | None",
                    "from_attributes": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "from_attributes",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate_json": {
                  "name": "model_validate_json",
                  "qualname": "BaseModel.model_validate_json",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
                  "annotations": {
                    "json_data": "str | bytes | bytearray",
                    "strict": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "json_data",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | bytes | bytearray"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate_strings": {
                  "name": "model_validate_strings",
                  "qualname": "BaseModel.model_validate_strings",
                  "module": "pydantic.main",
                  "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
                  "annotations": {
                    "obj": "Any",
                    "strict": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_file": {
                  "name": "parse_file",
                  "qualname": "BaseModel.parse_file",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "path": "str | Path",
                    "content_type": "str | None",
                    "encoding": "str",
                    "proto": "DeprecatedParseProtocol | None",
                    "allow_pickle": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "path",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | Path"
                    },
                    {
                      "name": "content_type",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "str | None"
                    },
                    {
                      "name": "encoding",
                      "kind": "KEYWORD_ONLY",
                      "default": "utf8",
                      "annotation": "str"
                    },
                    {
                      "name": "proto",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "DeprecatedParseProtocol | None"
                    },
                    {
                      "name": "allow_pickle",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_obj": {
                  "name": "parse_obj",
                  "qualname": "BaseModel.parse_obj",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "obj": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_raw": {
                  "name": "parse_raw",
                  "qualname": "BaseModel.parse_raw",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "b": "str | bytes",
                    "content_type": "str | None",
                    "encoding": "str",
                    "proto": "DeprecatedParseProtocol | None",
                    "allow_pickle": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "b",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | bytes"
                    },
                    {
                      "name": "content_type",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "str | None"
                    },
                    {
                      "name": "encoding",
                      "kind": "KEYWORD_ONLY",
                      "default": "utf8",
                      "annotation": "str"
                    },
                    {
                      "name": "proto",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "DeprecatedParseProtocol | None"
                    },
                    {
                      "name": "allow_pickle",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "schema": {
                  "name": "schema",
                  "qualname": "BaseModel.schema",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "return": "Dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    }
                  ],
                  "return_annotation": "Dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "schema_json": {
                  "name": "schema_json",
                  "qualname": "BaseModel.schema_json",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "dumps_kwargs": "Any",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "KEYWORD_ONLY",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    },
                    {
                      "name": "dumps_kwargs",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "update_forward_refs": {
                  "name": "update_forward_refs",
                  "qualname": "BaseModel.update_forward_refs",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "localns": "Any",
                    "return": "None"
                  },
                  "parameters": [
                    {
                      "name": "localns",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "validate": {
                  "name": "validate",
                  "qualname": "BaseModel.validate",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "value": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "value",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                }
              },
              "attributes": {
                "model_config": "dict",
                "model_fields": "property",
                "model_computed_fields": "property",
                "model_extra": "property",
                "model_fields_set": "property",
                "model_construct": "classmethod",
                "model_json_schema": "classmethod",
                "model_parametrized_name": "classmethod",
                "model_rebuild": "classmethod",
                "model_validate": "classmethod",
                "model_validate_json": "classmethod",
                "model_validate_strings": "classmethod",
                "parse_obj": "classmethod",
                "parse_raw": "classmethod",
                "parse_file": "classmethod",
                "from_orm": "classmethod",
                "construct": "classmethod",
                "schema": "classmethod",
                "schema_json": "classmethod",
                "validate": "classmethod",
                "update_forward_refs": "classmethod"
              },
              "annotations": {},
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
            },
            "LLMQuery": {
              "name": "LLMQuery",
              "qualname": "LLMQuery",
              "module": "cerebrum.llm.communication",
              "doc": "Query class represents the input structure for performing various actions.\n\nAttributes:\n    messages (List[Dict[str, Union[str, Any]]]): A list of dictionaries where each dictionary\n        represents a message containing 'role' and 'content' or other key-value pairs.\n    tools (Optional[List[Dict[str, Any]]]): An optional list of JSON-like objects (dictionaries) \n        representing tools and their parameters. Default is an empty list.\n    action_type (Literal): A string that must be one of \"message_llm\", \"call_tool\", or \"operate_file\".\n        This restricts the type of action the query performs.\n    message_return_type (str): The type of the response message. Default is \"text\".",
              "bases": [
                "Request"
              ],
              "methods": {
                "construct": {
                  "name": "construct",
                  "qualname": "BaseModel.construct",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "_fields_set": "set[str] | None",
                    "values": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "_fields_set",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "None",
                      "annotation": "set[str] | None"
                    },
                    {
                      "name": "values",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "copy": {
                  "name": "copy",
                  "qualname": "BaseModel.copy",
                  "module": "pydantic.main",
                  "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
                  "annotations": {
                    "include": "AbstractSetIntStr | MappingIntStrAny | None",
                    "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                    "update": "Dict[str, Any] | None",
                    "deep": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                    },
                    {
                      "name": "update",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Dict[str, Any] | None"
                    },
                    {
                      "name": "deep",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "dict": {
                  "name": "dict",
                  "qualname": "BaseModel.dict",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "return": "Dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "from_orm": {
                  "name": "from_orm",
                  "qualname": "BaseModel.from_orm",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "obj": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "json": {
                  "name": "json",
                  "qualname": "BaseModel.json",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "encoder": "Callable[[Any], Any] | None",
                    "models_as_dict": "bool",
                    "dumps_kwargs": "Any",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "encoder",
                      "kind": "KEYWORD_ONLY",
                      "default": "PydanticUndefined",
                      "annotation": "Callable[[Any], Any] | None"
                    },
                    {
                      "name": "models_as_dict",
                      "kind": "KEYWORD_ONLY",
                      "default": "PydanticUndefined",
                      "annotation": "bool"
                    },
                    {
                      "name": "dumps_kwargs",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_construct": {
                  "name": "model_construct",
                  "qualname": "BaseModel.model_construct",
                  "module": "pydantic.main",
                  "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
                  "annotations": {
                    "_fields_set": "set[str] | None",
                    "values": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "_fields_set",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "None",
                      "annotation": "set[str] | None"
                    },
                    {
                      "name": "values",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_copy": {
                  "name": "model_copy",
                  "qualname": "BaseModel.model_copy",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
                  "annotations": {
                    "update": "Mapping[str, Any] | None",
                    "deep": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "update",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Mapping[str, Any] | None"
                    },
                    {
                      "name": "deep",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_dump": {
                  "name": "model_dump",
                  "qualname": "BaseModel.model_dump",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
                  "annotations": {
                    "mode": "Literal['json', 'python'] | str",
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "context": "Any | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "round_trip": "bool",
                    "warnings": "bool | Literal['none', 'warn', 'error']",
                    "serialize_as_any": "bool",
                    "return": "dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "mode",
                      "kind": "KEYWORD_ONLY",
                      "default": "python",
                      "annotation": "Literal['json', 'python'] | str"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "round_trip",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "warnings",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool | Literal['none', 'warn', 'error']"
                    },
                    {
                      "name": "serialize_as_any",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_dump_json": {
                  "name": "model_dump_json",
                  "qualname": "BaseModel.model_dump_json",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
                  "annotations": {
                    "indent": "int | None",
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "context": "Any | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "round_trip": "bool",
                    "warnings": "bool | Literal['none', 'warn', 'error']",
                    "serialize_as_any": "bool",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "indent",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "int | None"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "round_trip",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "warnings",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool | Literal['none', 'warn', 'error']"
                    },
                    {
                      "name": "serialize_as_any",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_json_schema": {
                  "name": "model_json_schema",
                  "qualname": "BaseModel.model_json_schema",
                  "module": "pydantic.main",
                  "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "schema_generator": "type[GenerateJsonSchema]",
                    "mode": "JsonSchemaMode",
                    "return": "dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    },
                    {
                      "name": "schema_generator",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                      "annotation": "type[GenerateJsonSchema]"
                    },
                    {
                      "name": "mode",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "validation",
                      "annotation": "JsonSchemaMode"
                    }
                  ],
                  "return_annotation": "dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_parametrized_name": {
                  "name": "model_parametrized_name",
                  "qualname": "BaseModel.model_parametrized_name",
                  "module": "pydantic.main",
                  "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
                  "annotations": {
                    "params": "tuple[type[Any], ...]",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "params",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "tuple[type[Any], ...]"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_post_init": {
                  "name": "model_post_init",
                  "qualname": "BaseModel.model_post_init",
                  "module": "pydantic.main",
                  "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
                  "annotations": {
                    "_BaseModel__context": "Any",
                    "return": "None"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "_BaseModel__context",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_rebuild": {
                  "name": "model_rebuild",
                  "qualname": "BaseModel.model_rebuild",
                  "module": "pydantic.main",
                  "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
                  "annotations": {
                    "force": "bool",
                    "raise_errors": "bool",
                    "_parent_namespace_depth": "int",
                    "_types_namespace": "MappingNamespace | None",
                    "return": "bool | None"
                  },
                  "parameters": [
                    {
                      "name": "force",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "raise_errors",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "_parent_namespace_depth",
                      "kind": "KEYWORD_ONLY",
                      "default": "2",
                      "annotation": "int"
                    },
                    {
                      "name": "_types_namespace",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "MappingNamespace | None"
                    }
                  ],
                  "return_annotation": "bool | None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate": {
                  "name": "model_validate",
                  "qualname": "BaseModel.model_validate",
                  "module": "pydantic.main",
                  "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
                  "annotations": {
                    "obj": "Any",
                    "strict": "bool | None",
                    "from_attributes": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "from_attributes",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate_json": {
                  "name": "model_validate_json",
                  "qualname": "BaseModel.model_validate_json",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
                  "annotations": {
                    "json_data": "str | bytes | bytearray",
                    "strict": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "json_data",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | bytes | bytearray"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate_strings": {
                  "name": "model_validate_strings",
                  "qualname": "BaseModel.model_validate_strings",
                  "module": "pydantic.main",
                  "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
                  "annotations": {
                    "obj": "Any",
                    "strict": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_file": {
                  "name": "parse_file",
                  "qualname": "BaseModel.parse_file",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "path": "str | Path",
                    "content_type": "str | None",
                    "encoding": "str",
                    "proto": "DeprecatedParseProtocol | None",
                    "allow_pickle": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "path",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | Path"
                    },
                    {
                      "name": "content_type",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "str | None"
                    },
                    {
                      "name": "encoding",
                      "kind": "KEYWORD_ONLY",
                      "default": "utf8",
                      "annotation": "str"
                    },
                    {
                      "name": "proto",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "DeprecatedParseProtocol | None"
                    },
                    {
                      "name": "allow_pickle",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_obj": {
                  "name": "parse_obj",
                  "qualname": "BaseModel.parse_obj",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "obj": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_raw": {
                  "name": "parse_raw",
                  "qualname": "BaseModel.parse_raw",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "b": "str | bytes",
                    "content_type": "str | None",
                    "encoding": "str",
                    "proto": "DeprecatedParseProtocol | None",
                    "allow_pickle": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "b",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | bytes"
                    },
                    {
                      "name": "content_type",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "str | None"
                    },
                    {
                      "name": "encoding",
                      "kind": "KEYWORD_ONLY",
                      "default": "utf8",
                      "annotation": "str"
                    },
                    {
                      "name": "proto",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "DeprecatedParseProtocol | None"
                    },
                    {
                      "name": "allow_pickle",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "schema": {
                  "name": "schema",
                  "qualname": "BaseModel.schema",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "return": "Dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    }
                  ],
                  "return_annotation": "Dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "schema_json": {
                  "name": "schema_json",
                  "qualname": "BaseModel.schema_json",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "dumps_kwargs": "Any",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "KEYWORD_ONLY",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    },
                    {
                      "name": "dumps_kwargs",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "update_forward_refs": {
                  "name": "update_forward_refs",
                  "qualname": "BaseModel.update_forward_refs",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "localns": "Any",
                    "return": "None"
                  },
                  "parameters": [
                    {
                      "name": "localns",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "validate": {
                  "name": "validate",
                  "qualname": "BaseModel.validate",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "value": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "value",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                }
              },
              "attributes": {
                "model_config": "dict"
              },
              "annotations": {
                "messages": "typing.List[typing.Dict[str, typing.Union[str, typing.Any]]]",
                "tools": "typing.Optional[typing.List[typing.Dict[str, typing.Any]]]",
                "action_type": "typing.Literal['chat', 'tool_use', 'operate_file']",
                "message_return_type": "<class 'str'>"
              },
              "source_file": "/home/swami/Cerebrum/cerebrum/llm/communication.py"
            },
            "Request": {
              "name": "Request",
              "qualname": "Request",
              "module": "cerebrum.llm.communication",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\n\nA base class for creating Pydantic models.\n\nAttributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.\n\n    __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n    __pydantic_core_schema__: The core schema of the model.\n    __pydantic_custom_init__: Whether the model has a custom `__init__` function.\n    __pydantic_decorators__: Metadata containing the decorators defined on the model.\n        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n    __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n    __pydantic_post_init__: The name of the post-init method for the model, if defined.\n    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n    __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n    __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n    __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n        is set to `'allow'`.\n    __pydantic_fields_set__: The names of fields explicitly set during instantiation.\n    __pydantic_private__: Values of private attributes set on the model instance.",
              "bases": [
                "BaseModel"
              ],
              "methods": {
                "construct": {
                  "name": "construct",
                  "qualname": "BaseModel.construct",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "_fields_set": "set[str] | None",
                    "values": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "_fields_set",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "None",
                      "annotation": "set[str] | None"
                    },
                    {
                      "name": "values",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "copy": {
                  "name": "copy",
                  "qualname": "BaseModel.copy",
                  "module": "pydantic.main",
                  "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
                  "annotations": {
                    "include": "AbstractSetIntStr | MappingIntStrAny | None",
                    "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                    "update": "Dict[str, Any] | None",
                    "deep": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                    },
                    {
                      "name": "update",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Dict[str, Any] | None"
                    },
                    {
                      "name": "deep",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "dict": {
                  "name": "dict",
                  "qualname": "BaseModel.dict",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "return": "Dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "from_orm": {
                  "name": "from_orm",
                  "qualname": "BaseModel.from_orm",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "obj": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "json": {
                  "name": "json",
                  "qualname": "BaseModel.json",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "encoder": "Callable[[Any], Any] | None",
                    "models_as_dict": "bool",
                    "dumps_kwargs": "Any",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "encoder",
                      "kind": "KEYWORD_ONLY",
                      "default": "PydanticUndefined",
                      "annotation": "Callable[[Any], Any] | None"
                    },
                    {
                      "name": "models_as_dict",
                      "kind": "KEYWORD_ONLY",
                      "default": "PydanticUndefined",
                      "annotation": "bool"
                    },
                    {
                      "name": "dumps_kwargs",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_construct": {
                  "name": "model_construct",
                  "qualname": "BaseModel.model_construct",
                  "module": "pydantic.main",
                  "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
                  "annotations": {
                    "_fields_set": "set[str] | None",
                    "values": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "_fields_set",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "None",
                      "annotation": "set[str] | None"
                    },
                    {
                      "name": "values",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_copy": {
                  "name": "model_copy",
                  "qualname": "BaseModel.model_copy",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
                  "annotations": {
                    "update": "Mapping[str, Any] | None",
                    "deep": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "update",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Mapping[str, Any] | None"
                    },
                    {
                      "name": "deep",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_dump": {
                  "name": "model_dump",
                  "qualname": "BaseModel.model_dump",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
                  "annotations": {
                    "mode": "Literal['json', 'python'] | str",
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "context": "Any | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "round_trip": "bool",
                    "warnings": "bool | Literal['none', 'warn', 'error']",
                    "serialize_as_any": "bool",
                    "return": "dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "mode",
                      "kind": "KEYWORD_ONLY",
                      "default": "python",
                      "annotation": "Literal['json', 'python'] | str"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "round_trip",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "warnings",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool | Literal['none', 'warn', 'error']"
                    },
                    {
                      "name": "serialize_as_any",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_dump_json": {
                  "name": "model_dump_json",
                  "qualname": "BaseModel.model_dump_json",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
                  "annotations": {
                    "indent": "int | None",
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "context": "Any | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "round_trip": "bool",
                    "warnings": "bool | Literal['none', 'warn', 'error']",
                    "serialize_as_any": "bool",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "indent",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "int | None"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "round_trip",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "warnings",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool | Literal['none', 'warn', 'error']"
                    },
                    {
                      "name": "serialize_as_any",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_json_schema": {
                  "name": "model_json_schema",
                  "qualname": "BaseModel.model_json_schema",
                  "module": "pydantic.main",
                  "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "schema_generator": "type[GenerateJsonSchema]",
                    "mode": "JsonSchemaMode",
                    "return": "dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    },
                    {
                      "name": "schema_generator",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                      "annotation": "type[GenerateJsonSchema]"
                    },
                    {
                      "name": "mode",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "validation",
                      "annotation": "JsonSchemaMode"
                    }
                  ],
                  "return_annotation": "dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_parametrized_name": {
                  "name": "model_parametrized_name",
                  "qualname": "BaseModel.model_parametrized_name",
                  "module": "pydantic.main",
                  "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
                  "annotations": {
                    "params": "tuple[type[Any], ...]",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "params",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "tuple[type[Any], ...]"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_post_init": {
                  "name": "model_post_init",
                  "qualname": "BaseModel.model_post_init",
                  "module": "pydantic.main",
                  "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
                  "annotations": {
                    "_BaseModel__context": "Any",
                    "return": "None"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "_BaseModel__context",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_rebuild": {
                  "name": "model_rebuild",
                  "qualname": "BaseModel.model_rebuild",
                  "module": "pydantic.main",
                  "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
                  "annotations": {
                    "force": "bool",
                    "raise_errors": "bool",
                    "_parent_namespace_depth": "int",
                    "_types_namespace": "MappingNamespace | None",
                    "return": "bool | None"
                  },
                  "parameters": [
                    {
                      "name": "force",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "raise_errors",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "_parent_namespace_depth",
                      "kind": "KEYWORD_ONLY",
                      "default": "2",
                      "annotation": "int"
                    },
                    {
                      "name": "_types_namespace",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "MappingNamespace | None"
                    }
                  ],
                  "return_annotation": "bool | None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate": {
                  "name": "model_validate",
                  "qualname": "BaseModel.model_validate",
                  "module": "pydantic.main",
                  "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
                  "annotations": {
                    "obj": "Any",
                    "strict": "bool | None",
                    "from_attributes": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "from_attributes",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate_json": {
                  "name": "model_validate_json",
                  "qualname": "BaseModel.model_validate_json",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
                  "annotations": {
                    "json_data": "str | bytes | bytearray",
                    "strict": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "json_data",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | bytes | bytearray"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate_strings": {
                  "name": "model_validate_strings",
                  "qualname": "BaseModel.model_validate_strings",
                  "module": "pydantic.main",
                  "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
                  "annotations": {
                    "obj": "Any",
                    "strict": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_file": {
                  "name": "parse_file",
                  "qualname": "BaseModel.parse_file",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "path": "str | Path",
                    "content_type": "str | None",
                    "encoding": "str",
                    "proto": "DeprecatedParseProtocol | None",
                    "allow_pickle": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "path",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | Path"
                    },
                    {
                      "name": "content_type",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "str | None"
                    },
                    {
                      "name": "encoding",
                      "kind": "KEYWORD_ONLY",
                      "default": "utf8",
                      "annotation": "str"
                    },
                    {
                      "name": "proto",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "DeprecatedParseProtocol | None"
                    },
                    {
                      "name": "allow_pickle",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_obj": {
                  "name": "parse_obj",
                  "qualname": "BaseModel.parse_obj",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "obj": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_raw": {
                  "name": "parse_raw",
                  "qualname": "BaseModel.parse_raw",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "b": "str | bytes",
                    "content_type": "str | None",
                    "encoding": "str",
                    "proto": "DeprecatedParseProtocol | None",
                    "allow_pickle": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "b",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | bytes"
                    },
                    {
                      "name": "content_type",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "str | None"
                    },
                    {
                      "name": "encoding",
                      "kind": "KEYWORD_ONLY",
                      "default": "utf8",
                      "annotation": "str"
                    },
                    {
                      "name": "proto",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "DeprecatedParseProtocol | None"
                    },
                    {
                      "name": "allow_pickle",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "schema": {
                  "name": "schema",
                  "qualname": "BaseModel.schema",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "return": "Dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    }
                  ],
                  "return_annotation": "Dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "schema_json": {
                  "name": "schema_json",
                  "qualname": "BaseModel.schema_json",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "dumps_kwargs": "Any",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "KEYWORD_ONLY",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    },
                    {
                      "name": "dumps_kwargs",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "update_forward_refs": {
                  "name": "update_forward_refs",
                  "qualname": "BaseModel.update_forward_refs",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "localns": "Any",
                    "return": "None"
                  },
                  "parameters": [
                    {
                      "name": "localns",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "validate": {
                  "name": "validate",
                  "qualname": "BaseModel.validate",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "value": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "value",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                }
              },
              "attributes": {
                "model_config": "dict"
              },
              "annotations": {},
              "source_file": "/home/swami/Cerebrum/cerebrum/llm/communication.py"
            },
            "Response": {
              "name": "Response",
              "qualname": "Response",
              "module": "cerebrum.llm.communication",
              "doc": "Response class represents the output structure after performing actions.\n\nAttributes:\n    response_message (Optional[str]): The generated response message. Default is None.\n    tool_calls (Optional[List[Dict[str, Any]]]): An optional list of JSON-like objects (dictionaries) \n        representing the tool calls made during processing. Default is None.",
              "bases": [
                "BaseModel"
              ],
              "methods": {
                "construct": {
                  "name": "construct",
                  "qualname": "BaseModel.construct",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "_fields_set": "set[str] | None",
                    "values": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "_fields_set",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "None",
                      "annotation": "set[str] | None"
                    },
                    {
                      "name": "values",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "copy": {
                  "name": "copy",
                  "qualname": "BaseModel.copy",
                  "module": "pydantic.main",
                  "doc": "Returns a copy of the model.\n\n!!! warning \"Deprecated\"\n    This method is now deprecated; use `model_copy` instead.\n\nIf you need `include` or `exclude`, use:\n\n```python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n```\n\nArgs:\n    include: Optional set or mapping specifying which fields to include in the copied model.\n    exclude: Optional set or mapping specifying which fields to exclude in the copied model.\n    update: Optional dictionary of field-value pairs to override field values in the copied model.\n    deep: If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns:\n    A copy of the model with included, excluded and updated fields as specified.",
                  "annotations": {
                    "include": "AbstractSetIntStr | MappingIntStrAny | None",
                    "exclude": "AbstractSetIntStr | MappingIntStrAny | None",
                    "update": "Dict[str, Any] | None",
                    "deep": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "AbstractSetIntStr | MappingIntStrAny | None"
                    },
                    {
                      "name": "update",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Dict[str, Any] | None"
                    },
                    {
                      "name": "deep",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "dict": {
                  "name": "dict",
                  "qualname": "BaseModel.dict",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "return": "Dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "from_orm": {
                  "name": "from_orm",
                  "qualname": "BaseModel.from_orm",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "obj": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "json": {
                  "name": "json",
                  "qualname": "BaseModel.json",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "encoder": "Callable[[Any], Any] | None",
                    "models_as_dict": "bool",
                    "dumps_kwargs": "Any",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "encoder",
                      "kind": "KEYWORD_ONLY",
                      "default": "PydanticUndefined",
                      "annotation": "Callable[[Any], Any] | None"
                    },
                    {
                      "name": "models_as_dict",
                      "kind": "KEYWORD_ONLY",
                      "default": "PydanticUndefined",
                      "annotation": "bool"
                    },
                    {
                      "name": "dumps_kwargs",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_construct": {
                  "name": "model_construct",
                  "qualname": "BaseModel.model_construct",
                  "module": "pydantic.main",
                  "doc": "Creates a new instance of the `Model` class with validated data.\n\nCreates a new model setting `__dict__` and `__pydantic_fields_set__` from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n    `model_construct()` generally respects the `model_config.extra` setting on the provided model.\n    That is, if `model_config.extra == 'allow'`, then all extra passed values are added to the model instance's `__dict__`\n    and `__pydantic_extra__` fields. If `model_config.extra == 'ignore'` (the default), then all extra passed values are ignored.\n    Because no validation is performed with a call to `model_construct()`, having `model_config.extra == 'forbid'` does not result in\n    an error if extra values are passed, but they will be ignored.\n\nArgs:\n    _fields_set: A set of field names that were originally explicitly set during instantiation. If provided,\n        this is directly used for the [`model_fields_set`][pydantic.BaseModel.model_fields_set] attribute.\n        Otherwise, the field names from the `values` argument will be used.\n    values: Trusted or pre-validated data dictionary.\n\nReturns:\n    A new instance of the `Model` class with validated data.",
                  "annotations": {
                    "_fields_set": "set[str] | None",
                    "values": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "_fields_set",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "None",
                      "annotation": "set[str] | None"
                    },
                    {
                      "name": "values",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_copy": {
                  "name": "model_copy",
                  "qualname": "BaseModel.model_copy",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy\n\nReturns a copy of the model.\n\nArgs:\n    update: Values to change/add in the new model. Note: the data is not validated\n        before creating the new model. You should trust this data.\n    deep: Set to `True` to make a deep copy of the model.\n\nReturns:\n    New model instance.",
                  "annotations": {
                    "update": "Mapping[str, Any] | None",
                    "deep": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "update",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Mapping[str, Any] | None"
                    },
                    {
                      "name": "deep",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_dump": {
                  "name": "model_dump",
                  "qualname": "BaseModel.model_dump",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nArgs:\n    mode: The mode in which `to_python` should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A dictionary representation of the model.",
                  "annotations": {
                    "mode": "Literal['json', 'python'] | str",
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "context": "Any | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "round_trip": "bool",
                    "warnings": "bool | Literal['none', 'warn', 'error']",
                    "serialize_as_any": "bool",
                    "return": "dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "mode",
                      "kind": "KEYWORD_ONLY",
                      "default": "python",
                      "annotation": "Literal['json', 'python'] | str"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "round_trip",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "warnings",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool | Literal['none', 'warn', 'error']"
                    },
                    {
                      "name": "serialize_as_any",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_dump_json": {
                  "name": "model_dump_json",
                  "qualname": "BaseModel.model_dump_json",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json\n\nGenerates a JSON representation of the model using Pydantic's `to_json` method.\n\nArgs:\n    indent: Indentation to use in the JSON output. If None is passed, the output will be compact.\n    include: Field(s) to include in the JSON output.\n    exclude: Field(s) to exclude from the JSON output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to serialize using field aliases.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of `None`.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.\n\nReturns:\n    A JSON string representation of the model.",
                  "annotations": {
                    "indent": "int | None",
                    "include": "IncEx | None",
                    "exclude": "IncEx | None",
                    "context": "Any | None",
                    "by_alias": "bool",
                    "exclude_unset": "bool",
                    "exclude_defaults": "bool",
                    "exclude_none": "bool",
                    "round_trip": "bool",
                    "warnings": "bool | Literal['none', 'warn', 'error']",
                    "serialize_as_any": "bool",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "indent",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "int | None"
                    },
                    {
                      "name": "include",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "exclude",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "IncEx | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    },
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_unset",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_defaults",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "exclude_none",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "round_trip",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "warnings",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool | Literal['none', 'warn', 'error']"
                    },
                    {
                      "name": "serialize_as_any",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_json_schema": {
                  "name": "model_json_schema",
                  "qualname": "BaseModel.model_json_schema",
                  "module": "pydantic.main",
                  "doc": "Generates a JSON schema for a model class.\n\nArgs:\n    by_alias: Whether to use attribute aliases or not.\n    ref_template: The reference template.\n    schema_generator: To override the logic used to generate the JSON schema, as a subclass of\n        `GenerateJsonSchema` with your desired modifications\n    mode: The mode in which to generate the schema.\n\nReturns:\n    The JSON schema for the given model class.",
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "schema_generator": "type[GenerateJsonSchema]",
                    "mode": "JsonSchemaMode",
                    "return": "dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    },
                    {
                      "name": "schema_generator",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "<class 'pydantic.json_schema.GenerateJsonSchema'>",
                      "annotation": "type[GenerateJsonSchema]"
                    },
                    {
                      "name": "mode",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "validation",
                      "annotation": "JsonSchemaMode"
                    }
                  ],
                  "return_annotation": "dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_parametrized_name": {
                  "name": "model_parametrized_name",
                  "qualname": "BaseModel.model_parametrized_name",
                  "module": "pydantic.main",
                  "doc": "Compute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nArgs:\n    params: Tuple of types of the class. Given a generic class\n        `Model` with 2 type variables and a concrete model `Model[str, int]`,\n        the value `(str, int)` would be passed to `params`.\n\nReturns:\n    String representing the new class where `params` are passed to `cls` as type variables.\n\nRaises:\n    TypeError: Raised when trying to generate concrete names for non-generic models.",
                  "annotations": {
                    "params": "tuple[type[Any], ...]",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "params",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "tuple[type[Any], ...]"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_post_init": {
                  "name": "model_post_init",
                  "qualname": "BaseModel.model_post_init",
                  "module": "pydantic.main",
                  "doc": "Override this method to perform additional initialization after `__init__` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized.",
                  "annotations": {
                    "_BaseModel__context": "Any",
                    "return": "None"
                  },
                  "parameters": [
                    {
                      "name": "self",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "_BaseModel__context",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_rebuild": {
                  "name": "model_rebuild",
                  "qualname": "BaseModel.model_rebuild",
                  "module": "pydantic.main",
                  "doc": "Try to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nArgs:\n    force: Whether to force the rebuilding of the model schema, defaults to `False`.\n    raise_errors: Whether to raise errors, defaults to `True`.\n    _parent_namespace_depth: The depth level of the parent namespace, defaults to 2.\n    _types_namespace: The types namespace, defaults to `None`.\n\nReturns:\n    Returns `None` if the schema is already \"complete\" and rebuilding was not required.\n    If rebuilding _was_ required, returns `True` if rebuilding was successful, otherwise `False`.",
                  "annotations": {
                    "force": "bool",
                    "raise_errors": "bool",
                    "_parent_namespace_depth": "int",
                    "_types_namespace": "MappingNamespace | None",
                    "return": "bool | None"
                  },
                  "parameters": [
                    {
                      "name": "force",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    },
                    {
                      "name": "raise_errors",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "_parent_namespace_depth",
                      "kind": "KEYWORD_ONLY",
                      "default": "2",
                      "annotation": "int"
                    },
                    {
                      "name": "_types_namespace",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "MappingNamespace | None"
                    }
                  ],
                  "return_annotation": "bool | None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate": {
                  "name": "model_validate",
                  "qualname": "BaseModel.model_validate",
                  "module": "pydantic.main",
                  "doc": "Validate a pydantic model instance.\n\nArgs:\n    obj: The object to validate.\n    strict: Whether to enforce types strictly.\n    from_attributes: Whether to extract data from object attributes.\n    context: Additional context to pass to the validator.\n\nRaises:\n    ValidationError: If the object could not be validated.\n\nReturns:\n    The validated model instance.",
                  "annotations": {
                    "obj": "Any",
                    "strict": "bool | None",
                    "from_attributes": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "from_attributes",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate_json": {
                  "name": "model_validate_json",
                  "qualname": "BaseModel.model_validate_json",
                  "module": "pydantic.main",
                  "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/json/#json-parsing\n\nValidate the given JSON data against the Pydantic model.\n\nArgs:\n    json_data: The JSON data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.\n\nRaises:\n    ValidationError: If `json_data` is not a JSON string or the object could not be validated.",
                  "annotations": {
                    "json_data": "str | bytes | bytearray",
                    "strict": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "json_data",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | bytes | bytearray"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "model_validate_strings": {
                  "name": "model_validate_strings",
                  "qualname": "BaseModel.model_validate_strings",
                  "module": "pydantic.main",
                  "doc": "Validate the given object with string data against the Pydantic model.\n\nArgs:\n    obj: The object containing string data to validate.\n    strict: Whether to enforce types strictly.\n    context: Extra variables to pass to the validator.\n\nReturns:\n    The validated Pydantic model.",
                  "annotations": {
                    "obj": "Any",
                    "strict": "bool | None",
                    "context": "Any | None",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    },
                    {
                      "name": "strict",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "bool | None"
                    },
                    {
                      "name": "context",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "Any | None"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_file": {
                  "name": "parse_file",
                  "qualname": "BaseModel.parse_file",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "path": "str | Path",
                    "content_type": "str | None",
                    "encoding": "str",
                    "proto": "DeprecatedParseProtocol | None",
                    "allow_pickle": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "path",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | Path"
                    },
                    {
                      "name": "content_type",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "str | None"
                    },
                    {
                      "name": "encoding",
                      "kind": "KEYWORD_ONLY",
                      "default": "utf8",
                      "annotation": "str"
                    },
                    {
                      "name": "proto",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "DeprecatedParseProtocol | None"
                    },
                    {
                      "name": "allow_pickle",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_obj": {
                  "name": "parse_obj",
                  "qualname": "BaseModel.parse_obj",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "obj": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "obj",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "parse_raw": {
                  "name": "parse_raw",
                  "qualname": "BaseModel.parse_raw",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "b": "str | bytes",
                    "content_type": "str | None",
                    "encoding": "str",
                    "proto": "DeprecatedParseProtocol | None",
                    "allow_pickle": "bool",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "b",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "str | bytes"
                    },
                    {
                      "name": "content_type",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "str | None"
                    },
                    {
                      "name": "encoding",
                      "kind": "KEYWORD_ONLY",
                      "default": "utf8",
                      "annotation": "str"
                    },
                    {
                      "name": "proto",
                      "kind": "KEYWORD_ONLY",
                      "default": "None",
                      "annotation": "DeprecatedParseProtocol | None"
                    },
                    {
                      "name": "allow_pickle",
                      "kind": "KEYWORD_ONLY",
                      "default": "False",
                      "annotation": "bool"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "schema": {
                  "name": "schema",
                  "qualname": "BaseModel.schema",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "return": "Dict[str, Any]"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    }
                  ],
                  "return_annotation": "Dict[str, Any]",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "schema_json": {
                  "name": "schema_json",
                  "qualname": "BaseModel.schema_json",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "by_alias": "bool",
                    "ref_template": "str",
                    "dumps_kwargs": "Any",
                    "return": "str"
                  },
                  "parameters": [
                    {
                      "name": "by_alias",
                      "kind": "KEYWORD_ONLY",
                      "default": "True",
                      "annotation": "bool"
                    },
                    {
                      "name": "ref_template",
                      "kind": "KEYWORD_ONLY",
                      "default": "#/$defs/{model}",
                      "annotation": "str"
                    },
                    {
                      "name": "dumps_kwargs",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "str",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "update_forward_refs": {
                  "name": "update_forward_refs",
                  "qualname": "BaseModel.update_forward_refs",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "localns": "Any",
                    "return": "None"
                  },
                  "parameters": [
                    {
                      "name": "localns",
                      "kind": "VAR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "None",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                },
                "validate": {
                  "name": "validate",
                  "qualname": "BaseModel.validate",
                  "module": "pydantic.main",
                  "doc": null,
                  "annotations": {
                    "value": "Any",
                    "return": "Self"
                  },
                  "parameters": [
                    {
                      "name": "value",
                      "kind": "POSITIONAL_OR_KEYWORD",
                      "default": null,
                      "annotation": "Any"
                    }
                  ],
                  "return_annotation": "Self",
                  "is_coroutine": false,
                  "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/main.py"
                }
              },
              "attributes": {
                "model_config": "dict"
              },
              "annotations": {
                "response_message": "typing.Optional[str]",
                "tool_calls": "typing.Optional[typing.List[typing.Dict[str, typing.Any]]]",
                "finished": "<class 'bool'>"
              },
              "source_file": "/home/swami/Cerebrum/cerebrum/llm/communication.py"
            }
          },
          "functions": {
            "Field": {
              "name": "Field",
              "qualname": "Field",
              "module": "pydantic.fields",
              "doc": "Usage docs: https://docs.pydantic.dev/2.10/concepts/fields\n\nCreate a field for objects that can be configured.\n\nUsed to provide extra information about a field, either for the model schema or complex validation. Some arguments\napply only to number fields (`int`, `float`, `Decimal`) and some apply only to `str`.\n\nNote:\n    - Any `_Unset` objects will be replaced by the corresponding value defined in the `_DefaultValues` dictionary. If a key for the `_Unset` object is not found in the `_DefaultValues` dictionary, it will default to `None`\n\nArgs:\n    default: Default value if the field is not set.\n    default_factory: A callable to generate the default value. The callable can either take 0 arguments\n        (in which case it is called as is) or a single argument containing the already validated data.\n    alias: The name to use for the attribute when validating or serializing by alias.\n        This is often used for things like converting between snake and camel case.\n    alias_priority: Priority of the alias. This affects whether an alias generator is used.\n    validation_alias: Like `alias`, but only affects validation, not serialization.\n    serialization_alias: Like `alias`, but only affects serialization, not validation.\n    title: Human-readable title.\n    field_title_generator: A callable that takes a field name and returns title for it.\n    description: Human-readable description.\n    examples: Example values for this field.\n    exclude: Whether to exclude the field from the model serialization.\n    discriminator: Field name or Discriminator for discriminating the type in a tagged union.\n    deprecated: A deprecation message, an instance of `warnings.deprecated` or the `typing_extensions.deprecated` backport,\n        or a boolean. If `True`, a default deprecation message will be emitted when accessing the field.\n    json_schema_extra: A dict or callable to provide extra JSON schema properties.\n    frozen: Whether the field is frozen. If true, attempts to change the value on an instance will raise an error.\n    validate_default: If `True`, apply validation to the default value every time you create an instance.\n        Otherwise, for performance reasons, the default value of the field is trusted and not validated.\n    repr: A boolean indicating whether to include the field in the `__repr__` output.\n    init: Whether the field should be included in the constructor of the dataclass.\n        (Only applies to dataclasses.)\n    init_var: Whether the field should _only_ be included in the constructor of the dataclass.\n        (Only applies to dataclasses.)\n    kw_only: Whether the field should be a keyword-only argument in the constructor of the dataclass.\n        (Only applies to dataclasses.)\n    coerce_numbers_to_str: Whether to enable coercion of any `Number` type to `str` (not applicable in `strict` mode).\n    strict: If `True`, strict validation is applied to the field.\n        See [Strict Mode](../concepts/strict_mode.md) for details.\n    gt: Greater than. If set, value must be greater than this. Only applicable to numbers.\n    ge: Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.\n    lt: Less than. If set, value must be less than this. Only applicable to numbers.\n    le: Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.\n    multiple_of: Value must be a multiple of this. Only applicable to numbers.\n    min_length: Minimum length for iterables.\n    max_length: Maximum length for iterables.\n    pattern: Pattern for strings (a regular expression).\n    allow_inf_nan: Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n    max_digits: Maximum number of allow digits for strings.\n    decimal_places: Maximum number of decimal places allowed for numbers.\n    union_mode: The strategy to apply when validating a union. Can be `smart` (the default), or `left_to_right`.\n        See [Union Mode](../concepts/unions.md#union-modes) for details.\n    fail_fast: If `True`, validation will stop on the first error. If `False`, all validation errors will be collected.\n        This option can be applied only to iterable types (list, tuple, set, and frozenset).\n    extra: (Deprecated) Extra fields that will be included in the JSON schema.\n\n        !!! warning Deprecated\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n\nReturns:\n    A new [`FieldInfo`][pydantic.fields.FieldInfo]. The return annotation is `Any` so `Field` can be used on\n        type-annotated fields without causing a type error.",
              "annotations": {
                "default": "Any",
                "default_factory": "Callable[[], Any] | Callable[[dict[str, Any]], Any] | None",
                "alias": "str | None",
                "alias_priority": "int | None",
                "validation_alias": "str | AliasPath | AliasChoices | None",
                "serialization_alias": "str | None",
                "title": "str | None",
                "field_title_generator": "Callable[[str, FieldInfo], str] | None",
                "description": "str | None",
                "examples": "list[Any] | None",
                "exclude": "bool | None",
                "discriminator": "str | types.Discriminator | None",
                "deprecated": "Deprecated | str | bool | None",
                "json_schema_extra": "JsonDict | Callable[[JsonDict], None] | None",
                "frozen": "bool | None",
                "validate_default": "bool | None",
                "repr": "bool",
                "init": "bool | None",
                "init_var": "bool | None",
                "kw_only": "bool | None",
                "pattern": "str | typing.Pattern[str] | None",
                "strict": "bool | None",
                "coerce_numbers_to_str": "bool | None",
                "gt": "annotated_types.SupportsGt | None",
                "ge": "annotated_types.SupportsGe | None",
                "lt": "annotated_types.SupportsLt | None",
                "le": "annotated_types.SupportsLe | None",
                "multiple_of": "float | None",
                "allow_inf_nan": "bool | None",
                "max_digits": "int | None",
                "decimal_places": "int | None",
                "min_length": "int | None",
                "max_length": "int | None",
                "union_mode": "Literal['smart', 'left_to_right']",
                "fail_fast": "bool | None",
                "extra": "Unpack[_EmptyKwargs]",
                "return": "Any"
              },
              "parameters": [
                {
                  "name": "default",
                  "kind": "POSITIONAL_OR_KEYWORD",
                  "default": "PydanticUndefined",
                  "annotation": "Any"
                },
                {
                  "name": "default_factory",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[], Any] | Callable[[dict[str, Any]], Any] | None"
                },
                {
                  "name": "alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "str | None"
                },
                {
                  "name": "alias_priority",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "int | None"
                },
                {
                  "name": "validation_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "str | AliasPath | AliasChoices | None"
                },
                {
                  "name": "serialization_alias",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "str | None"
                },
                {
                  "name": "title",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "str | None"
                },
                {
                  "name": "field_title_generator",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Callable[[str, FieldInfo], str] | None"
                },
                {
                  "name": "description",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "str | None"
                },
                {
                  "name": "examples",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "list[Any] | None"
                },
                {
                  "name": "exclude",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "discriminator",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "str | types.Discriminator | None"
                },
                {
                  "name": "deprecated",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Deprecated | str | bool | None"
                },
                {
                  "name": "json_schema_extra",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "JsonDict | Callable[[JsonDict], None] | None"
                },
                {
                  "name": "frozen",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "validate_default",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "repr",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool"
                },
                {
                  "name": "init",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "init_var",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "kw_only",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "pattern",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "str | typing.Pattern[str] | None"
                },
                {
                  "name": "strict",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "coerce_numbers_to_str",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "gt",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "annotated_types.SupportsGt | None"
                },
                {
                  "name": "ge",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "annotated_types.SupportsGe | None"
                },
                {
                  "name": "lt",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "annotated_types.SupportsLt | None"
                },
                {
                  "name": "le",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "annotated_types.SupportsLe | None"
                },
                {
                  "name": "multiple_of",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "float | None"
                },
                {
                  "name": "allow_inf_nan",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "max_digits",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "int | None"
                },
                {
                  "name": "decimal_places",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "int | None"
                },
                {
                  "name": "min_length",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "int | None"
                },
                {
                  "name": "max_length",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "int | None"
                },
                {
                  "name": "union_mode",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "Literal['smart', 'left_to_right']"
                },
                {
                  "name": "fail_fast",
                  "kind": "KEYWORD_ONLY",
                  "default": "PydanticUndefined",
                  "annotation": "bool | None"
                },
                {
                  "name": "extra",
                  "kind": "VAR_KEYWORD",
                  "default": null,
                  "annotation": "Unpack[_EmptyKwargs]"
                }
              ],
              "return_annotation": "Any",
              "is_coroutine": false,
              "source_file": "/home/swami/.virtualenvs/swami/lib/python3.10/site-packages/pydantic/fields.py"
            }
          },
          "submodules": {},
          "constants": {}
        },
        "layer": {
          "name": "cerebrum.llm.layer",
          "doc": null,
          "file": "/home/swami/Cerebrum/cerebrum/llm/layer.py",
          "classes": {
            "LLMLayer": {
              "name": "LLMLayer",
              "qualname": "LLMLayer",
              "module": "cerebrum.llm.layer",
              "doc": "LLMLayer(llm_name: str, max_gpu_memory: dict | None = None, eval_device: str = 'cuda:0', max_new_tokens: int = 2048, log_mode: str = 'console', llm_backend: str = 'default')",
              "bases": [],
              "methods": {},
              "attributes": {
                "max_gpu_memory": "NoneType",
                "eval_device": "str",
                "max_new_tokens": "int",
                "log_mode": "str",
                "llm_backend": "str"
              },
              "annotations": {
                "llm_name": "<class 'str'>",
                "max_gpu_memory": "dict | None",
                "eval_device": "<class 'str'>",
                "max_new_tokens": "<class 'int'>",
                "log_mode": "<class 'str'>",
                "llm_backend": "<class 'str'>"
              },
              "source_file": "/home/swami/Cerebrum/cerebrum/llm/layer.py"
            }
          },
          "functions": {
            "dataclass": {
              "name": "dataclass",
              "qualname": "dataclass",
              "module": "dataclasses",
              "doc": "Returns the same class as was passed in, with dunder methods\nadded based on the fields defined in the class.\n\nExamines PEP 526 __annotations__ to determine fields.\n\nIf init is true, an __init__() method is added to the class. If\nrepr is true, a __repr__() method is added. If order is true, rich\ncomparison dunder methods are added. If unsafe_hash is true, a\n__hash__() method function is added. If frozen is true, fields may\nnot be assigned to after instance creation. If match_args is true,\nthe __match_args__ tuple is added. If kw_only is true, then by\ndefault all fields are keyword-only. If slots is true, an\n__slots__ attribute is added.",
              "annotations": {},
              "parameters": [
                {
                  "name": "cls",
                  "kind": "POSITIONAL_ONLY",
                  "default": "None",
                  "annotation": "Any"
                },
                {
                  "name": "init",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "repr",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "eq",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "order",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "unsafe_hash",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "frozen",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "match_args",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "kw_only",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "slots",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Any",
              "is_coroutine": false,
              "source_file": "/usr/lib/python3.10/dataclasses.py"
            }
          },
          "submodules": {},
          "constants": {}
        }
      },
      "constants": {}
    },
    "memory": {
      "name": "cerebrum.memory",
      "doc": null,
      "file": "/home/swami/Cerebrum/cerebrum/memory/__init__.py",
      "classes": {},
      "functions": {},
      "submodules": {
        "layer": {
          "name": "cerebrum.memory.layer",
          "doc": null,
          "file": "/home/swami/Cerebrum/cerebrum/memory/layer.py",
          "classes": {
            "MemoryLayer": {
              "name": "MemoryLayer",
              "qualname": "MemoryLayer",
              "module": "cerebrum.memory.layer",
              "doc": "MemoryLayer(memory_limit: int = 104857600, eviction_k: int = 10, custom_eviction_policy: Optional[str] = None)",
              "bases": [],
              "methods": {},
              "attributes": {
                "memory_limit": "int",
                "eviction_k": "int",
                "custom_eviction_policy": "NoneType"
              },
              "annotations": {
                "memory_limit": "<class 'int'>",
                "eviction_k": "<class 'int'>",
                "custom_eviction_policy": "typing.Optional[str]"
              },
              "source_file": "/home/swami/Cerebrum/cerebrum/memory/layer.py"
            }
          },
          "functions": {
            "dataclass": {
              "name": "dataclass",
              "qualname": "dataclass",
              "module": "dataclasses",
              "doc": "Returns the same class as was passed in, with dunder methods\nadded based on the fields defined in the class.\n\nExamines PEP 526 __annotations__ to determine fields.\n\nIf init is true, an __init__() method is added to the class. If\nrepr is true, a __repr__() method is added. If order is true, rich\ncomparison dunder methods are added. If unsafe_hash is true, a\n__hash__() method function is added. If frozen is true, fields may\nnot be assigned to after instance creation. If match_args is true,\nthe __match_args__ tuple is added. If kw_only is true, then by\ndefault all fields are keyword-only. If slots is true, an\n__slots__ attribute is added.",
              "annotations": {},
              "parameters": [
                {
                  "name": "cls",
                  "kind": "POSITIONAL_ONLY",
                  "default": "None",
                  "annotation": "Any"
                },
                {
                  "name": "init",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "repr",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "eq",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "order",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "unsafe_hash",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "frozen",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "match_args",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "kw_only",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "slots",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Any",
              "is_coroutine": false,
              "source_file": "/usr/lib/python3.10/dataclasses.py"
            }
          },
          "submodules": {},
          "constants": {}
        }
      },
      "constants": {}
    },
    "overrides": {
      "name": "cerebrum.overrides",
      "doc": null,
      "file": null,
      "classes": {},
      "functions": {},
      "submodules": {
        "layer": {
          "name": "cerebrum.overrides.layer",
          "doc": null,
          "file": "/home/swami/Cerebrum/cerebrum/overrides/layer.py",
          "classes": {
            "OverridesLayer": {
              "name": "OverridesLayer",
              "qualname": "OverridesLayer",
              "module": "cerebrum.overrides.layer",
              "doc": "OverridesLayer(log_mode: str = 'console', max_workers: int = 64, custom_syscalls: Optional[Dict[str, Any]] = None)",
              "bases": [],
              "methods": {},
              "attributes": {
                "log_mode": "str",
                "max_workers": "int",
                "custom_syscalls": "NoneType"
              },
              "annotations": {
                "log_mode": "<class 'str'>",
                "max_workers": "<class 'int'>",
                "custom_syscalls": "typing.Optional[typing.Dict[str, typing.Any]]"
              },
              "source_file": "/home/swami/Cerebrum/cerebrum/overrides/layer.py"
            }
          },
          "functions": {
            "dataclass": {
              "name": "dataclass",
              "qualname": "dataclass",
              "module": "dataclasses",
              "doc": "Returns the same class as was passed in, with dunder methods\nadded based on the fields defined in the class.\n\nExamines PEP 526 __annotations__ to determine fields.\n\nIf init is true, an __init__() method is added to the class. If\nrepr is true, a __repr__() method is added. If order is true, rich\ncomparison dunder methods are added. If unsafe_hash is true, a\n__hash__() method function is added. If frozen is true, fields may\nnot be assigned to after instance creation. If match_args is true,\nthe __match_args__ tuple is added. If kw_only is true, then by\ndefault all fields are keyword-only. If slots is true, an\n__slots__ attribute is added.",
              "annotations": {},
              "parameters": [
                {
                  "name": "cls",
                  "kind": "POSITIONAL_ONLY",
                  "default": "None",
                  "annotation": "Any"
                },
                {
                  "name": "init",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "repr",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "eq",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "order",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "unsafe_hash",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "frozen",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "match_args",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "kw_only",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "slots",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Any",
              "is_coroutine": false,
              "source_file": "/usr/lib/python3.10/dataclasses.py"
            }
          },
          "submodules": {},
          "constants": {}
        }
      },
      "constants": {}
    },
    "storage": {
      "name": "cerebrum.storage",
      "doc": null,
      "file": null,
      "classes": {},
      "functions": {},
      "submodules": {
        "layer": {
          "name": "cerebrum.storage.layer",
          "doc": null,
          "file": "/home/swami/Cerebrum/cerebrum/storage/layer.py",
          "classes": {
            "StorageLayer": {
              "name": "StorageLayer",
              "qualname": "StorageLayer",
              "module": "cerebrum.storage.layer",
              "doc": "StorageLayer(root_dir: str = 'root', use_vector_db: bool = False, vector_db_config: Optional[Dict[str, Any]] = None)",
              "bases": [],
              "methods": {},
              "attributes": {
                "root_dir": "str",
                "use_vector_db": "bool",
                "vector_db_config": "NoneType"
              },
              "annotations": {
                "root_dir": "<class 'str'>",
                "use_vector_db": "<class 'bool'>",
                "vector_db_config": "typing.Optional[typing.Dict[str, typing.Any]]"
              },
              "source_file": "/home/swami/Cerebrum/cerebrum/storage/layer.py"
            }
          },
          "functions": {
            "dataclass": {
              "name": "dataclass",
              "qualname": "dataclass",
              "module": "dataclasses",
              "doc": "Returns the same class as was passed in, with dunder methods\nadded based on the fields defined in the class.\n\nExamines PEP 526 __annotations__ to determine fields.\n\nIf init is true, an __init__() method is added to the class. If\nrepr is true, a __repr__() method is added. If order is true, rich\ncomparison dunder methods are added. If unsafe_hash is true, a\n__hash__() method function is added. If frozen is true, fields may\nnot be assigned to after instance creation. If match_args is true,\nthe __match_args__ tuple is added. If kw_only is true, then by\ndefault all fields are keyword-only. If slots is true, an\n__slots__ attribute is added.",
              "annotations": {},
              "parameters": [
                {
                  "name": "cls",
                  "kind": "POSITIONAL_ONLY",
                  "default": "None",
                  "annotation": "Any"
                },
                {
                  "name": "init",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "repr",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "eq",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "order",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "unsafe_hash",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "frozen",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "match_args",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "kw_only",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "slots",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Any",
              "is_coroutine": false,
              "source_file": "/usr/lib/python3.10/dataclasses.py"
            }
          },
          "submodules": {},
          "constants": {}
        }
      },
      "constants": {}
    },
    "tool": {
      "name": "cerebrum.tool",
      "doc": null,
      "file": null,
      "classes": {},
      "functions": {},
      "submodules": {
        "layer": {
          "name": "cerebrum.tool.layer",
          "doc": null,
          "file": "/home/swami/Cerebrum/cerebrum/tool/layer.py",
          "classes": {
            "ToolLayer": {
              "name": "ToolLayer",
              "qualname": "ToolLayer",
              "module": "cerebrum.tool.layer",
              "doc": "ToolLayer(allowed_tools: Optional[List[str]] = None, custom_tools: Optional[Dict[str, Any]] = None)",
              "bases": [],
              "methods": {},
              "attributes": {
                "allowed_tools": "NoneType",
                "custom_tools": "NoneType"
              },
              "annotations": {
                "allowed_tools": "typing.Optional[typing.List[str]]",
                "custom_tools": "typing.Optional[typing.Dict[str, typing.Any]]"
              },
              "source_file": "/home/swami/Cerebrum/cerebrum/tool/layer.py"
            }
          },
          "functions": {
            "dataclass": {
              "name": "dataclass",
              "qualname": "dataclass",
              "module": "dataclasses",
              "doc": "Returns the same class as was passed in, with dunder methods\nadded based on the fields defined in the class.\n\nExamines PEP 526 __annotations__ to determine fields.\n\nIf init is true, an __init__() method is added to the class. If\nrepr is true, a __repr__() method is added. If order is true, rich\ncomparison dunder methods are added. If unsafe_hash is true, a\n__hash__() method function is added. If frozen is true, fields may\nnot be assigned to after instance creation. If match_args is true,\nthe __match_args__ tuple is added. If kw_only is true, then by\ndefault all fields are keyword-only. If slots is true, an\n__slots__ attribute is added.",
              "annotations": {},
              "parameters": [
                {
                  "name": "cls",
                  "kind": "POSITIONAL_ONLY",
                  "default": "None",
                  "annotation": "Any"
                },
                {
                  "name": "init",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "repr",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "eq",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "order",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "unsafe_hash",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "frozen",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "match_args",
                  "kind": "KEYWORD_ONLY",
                  "default": "True",
                  "annotation": "Any"
                },
                {
                  "name": "kw_only",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                },
                {
                  "name": "slots",
                  "kind": "KEYWORD_ONLY",
                  "default": "False",
                  "annotation": "Any"
                }
              ],
              "return_annotation": "Any",
              "is_coroutine": false,
              "source_file": "/usr/lib/python3.10/dataclasses.py"
            }
          },
          "submodules": {},
          "constants": {}
        }
      },
      "constants": {}
    }
  },
  "constants": {
    "config": "Config"
  }
}